<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" version="2.0"><channel><atom:id>tag:blogger.com,1999:blog-7941666868022023550</atom:id><lastBuildDate>Wed, 23 Mar 2016 07:27:03 +0000</lastBuildDate><title>Not Just Another Blog</title><description></description><link>http://shazsterblog.blogspot.com/</link><managingEditor>noreply@blogger.com (Shazin Sadakath)</managingEditor><generator>Blogger</generator><openSearch:totalResults>93</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-382942935109831085</guid><pubDate>Sun, 13 Mar 2016 19:17:00 +0000</pubDate><atom:updated>2016-03-13T12:20:34.513-07:00</atom:updated><title>Home Security using Raspberry Pi + Web Cam + PIR Sensor and Telegram Bot</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I saw a &lt;a href=&quot;http://hackaday.com/2016/03/12/telegram-your-devices/&quot;&gt;post&lt;/a&gt;&amp;nbsp;in Hackaday.com which was about using Telegram API to control LEDs attached to a Raspberry Pi. Telegram is a messaging service similar to Watsapp but it allows a unique bot API to support its non human machine to machine communication.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Because of this feature it is hacker friendly because the possibilities are only limited by imagination. I had a PIR sensor and a USB web camera lying around and thought it would be cool to put together something related to Telegram bot API using those.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In Sri Lanka CCTV cameras selling like hot cake and office and home security surveillance has become a high priority in the last couple of years. Because of this I thought it would be cool to put a Home security service for me using the aforementioned components.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Thus came up with the following schematic.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-TjL1gnP0Ru4/VuW4epgc1YI/AAAAAAAADgo/GUvO1qkIuVgTNegfUGsEV0eBqhkBcGheQ/s1600/HomeSecurity.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;326&quot; src=&quot;https://3.bp.blogspot.com/-TjL1gnP0Ru4/VuW4epgc1YI/AAAAAAAADgo/GUvO1qkIuVgTNegfUGsEV0eBqhkBcGheQ/s400/HomeSecurity.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;And attached the USB camera to the Raspberry Pi&#39;s USB port.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-Yq-YBNZ2SMo/VuW4uFxb9EI/AAAAAAAADgs/zO8s6d1Yc0UPiEV7BNACfgFGXc8Fv7RwA/s1600/20160313_235551.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://3.bp.blogspot.com/-Yq-YBNZ2SMo/VuW4uFxb9EI/AAAAAAAADgs/zO8s6d1Yc0UPiEV7BNACfgFGXc8Fv7RwA/s400/20160313_235551.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Finally a little bit of coding&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/shazin/810d3be828163d2b032f.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;After installing all important Telegram messenger and creating a bot by going through the Documentation of Telegram, finally I managed to get the whole thing working together. You can see the application in action in the following video.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe width=&quot;320&quot; height=&quot;266&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/n6F4osFo3BI/0.jpg&quot; src=&quot;https://www.youtube.com/embed/n6F4osFo3BI?feature=player_embedded&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;http://www.instructables.com/id/Telegram-on-Raspberry-Pi/&quot;&gt;Telegram on Raspberry Pi&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/learning/parent-detector/worksheet/&quot;&gt;Raspberry Pi + PIR&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/python-telegram-bot/python-telegram-bot&quot;&gt;Telegram Bot Python Library&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://core.telegram.org/bots&quot;&gt;Telegram Bots Introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/usage/webcams/&quot;&gt;Standard Web Cam usage in Raspberry Pi&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2016/03/home-security-using-raspberry-pi-web.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-TjL1gnP0Ru4/VuW4epgc1YI/AAAAAAAADgo/GUvO1qkIuVgTNegfUGsEV0eBqhkBcGheQ/s72-c/HomeSecurity.png" height="72" width="72"/><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-4330096023665610922</guid><pubDate>Thu, 03 Mar 2016 15:41:00 +0000</pubDate><atom:updated>2016-03-03T08:32:13.867-08:00</atom:updated><title>Temperature and Humidity Measuring using Arduino + DHT Sensor</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Oven, the somewhat correct word which can be used explain Sri Lankan climate at the moment. It becomes so hot during the day and somewhat similar in the nights. Sleeping is impossible without taking a shower. Ideal time to do a project to measure the Humidity and Temperature.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Had the DHT sensor and a 8x2 LCD (GDM0802A) lying around in my electronics collection and thought to put up a small project.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Unfortunately the LCD didn&#39;t have pins so I had to do a bit of soldering. To be honest not the most experienced man when it comes to soldering, so was a bit worried to get started and going. But anyway went on with it and finally managed to do a pretty decent job with the hot iron and it came out well enough to work.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-X1-0mOVgdAs/VthY4on-6RI/AAAAAAAADgM/-NMiHRaW3Qo/s1600/1.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-X1-0mOVgdAs/VthY4on-6RI/AAAAAAAADgM/-NMiHRaW3Qo/s400/1.jpg&quot; width=&quot;220&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;And managed to get the following schematic in place for the project.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-NdHvuMhl0ic/VthYlDvs0AI/AAAAAAAADgU/M1UG6OhTW28/s1600/LCD.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;https://4.bp.blogspot.com/-NdHvuMhl0ic/VthYlDvs0AI/AAAAAAAADgU/M1UG6OhTW28/s320/LCD.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;And a bit of Arduino coding to get the sketch done.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/shazin/921636b72fdcf6f86aa2.js&quot;&gt;&lt;/script&gt;Finally the whole project in working mode.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-6eq52jiivb0/VthY6JZgC-I/AAAAAAAADgQ/oX8VY3u-GdE/s1600/2.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://4.bp.blogspot.com/-6eq52jiivb0/VthY6JZgC-I/AAAAAAAADgQ/oX8VY3u-GdE/s400/2.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;And video of humidity changing when a cold water bottle is placed near.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;iframe width=&quot;320&quot; height=&quot;266&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/YW0O2QJ_Sdk/0.jpg&quot; src=&quot;https://www.youtube.com/embed/YW0O2QJ_Sdk?feature=player_embedded&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;DHT Library - &lt;a href=&quot;https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor&quot;&gt;https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GDM0802A Datasheet - &lt;a href=&quot;https://www.robot-r-us.com/pololu/sensorlcd/532-gdm0802a-fl-ybw.html&quot;&gt;https://www.robot-r-us.com/pololu/sensorlcd/532-gdm0802a-fl-ybw.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2016/03/temperature-and-humidity-measuring.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-X1-0mOVgdAs/VthY4on-6RI/AAAAAAAADgM/-NMiHRaW3Qo/s72-c/1.jpg" height="72" width="72"/><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-1346445827724222665</guid><pubDate>Thu, 25 Feb 2016 08:04:00 +0000</pubDate><atom:updated>2016-02-25T00:06:38.491-08:00</atom:updated><title>Asynchronous Streaming Request Processing in Spring MVC 4.2 + Spring Boot</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;With the release of Spring 4.2 version, Three new classes have been introduced to handle Requests Asynchronously of the Servlet Thread. Which are;&lt;/div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.html&quot;&gt;ResponseBodyEmitter&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.html&quot;&gt;SseEmitter&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html&quot;&gt;StreamingResponseBody&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;ResponseBodyEmitter enables to send DeferredResult with a compatible HttpMessageConverter. Results can be emitted from threads which are not necessarily the Servlet Request Thread of the Servlet Container.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;SseEmitter is used to send Server Sent Events to the Client. Server Sent Events has a fixed format and the response type for the result will be text/event-stream.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;StreamingResponseBody is used to send raw unformatted data such as bytes to the client asynchronously of the Servlet Thread.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;ResponseBodyEmitter and SseEmitter has a method named complete to mark its completion and StreamingResponseBody will complete when there is no more data to send.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;All three options will be keeping alive a connection to the endpoint until the end of the request.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;StreamingResponseBody is particularly useful for streaming large files such as Media Files as writing of the bytes to the Response&#39;s OutputStream will be done asynchronously. StreamingResponseBody has a writeTo(OutputStream os) call back method which needs to be overridden inorder to support streaming.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I wrote a small Spring Boot Application to showcase the StreamingResponseBody capabilities in terms of Streaming large files. The application source code can be found at&amp;nbsp;&lt;a href=&quot;http://www.github.com/shazin/itube&quot;&gt;www.github.com/shazin/itube&lt;/a&gt;. Below is a screen shot of the application.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-RFLSpvrmcHA/Vs6y3CuH1wI/AAAAAAAADfk/Y8592RNImoQ/s1600/Video.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://2.bp.blogspot.com/-RFLSpvrmcHA/Vs6y3CuH1wI/AAAAAAAADfk/Y8592RNImoQ/s400/Video.png&quot; width=&quot;337&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In order to send the Video files streaming to the Projekktor player in the web page following code snippet is used.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/shazin/52853a91083300c4b57d.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;And a Custom Web Configuration to over ride default timeout behavior to no timeout and finally configuring an AsyncTaskExecutor&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/shazin/11ddb1ff3733941ca850.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/spring-mvc-4-2&quot;&gt;Spring MVC 4.2: New and Noteworthy - Rossen Stoyanchev&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.projekktor.com/&quot;&gt;Projekktor Player&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.videezy.com/&quot;&gt;Videos Downloaded From Videezy&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2016/02/asynchronous-streaming-request.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-RFLSpvrmcHA/Vs6y3CuH1wI/AAAAAAAADfk/Y8592RNImoQ/s72-c/Video.png" height="72" width="72"/><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-5776002606225824765</guid><pubDate>Tue, 16 Feb 2016 10:57:00 +0000</pubDate><atom:updated>2016-02-16T03:02:07.965-08:00</atom:updated><title>The New Buzz Word in Information Technology Space - Microservices</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Microservices, a word which is buzzing around information technology space almost everyday. What is this means? How did we get here?&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Well to start off we need to go back to good old days to see how enterprise applications were developed. Most of the application developed at that time where Monolithic. Monolithic applications are collection of functionalities grouped together which will eventually be compiled and packaged into one single application. In Java terms a Jar/War/Ear. In a monolithic application if an application had a Web Tier, User Registration and Account Registration functionalities. All these will be packaged and deployed as a single unit. Let&#39;s see the pros and cons of this approach.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Pros of Monolithic Applications&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Easy steps to build (can be automated).&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Ease of monitoring.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Centralized code repository.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Code is monoglot.&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Cons of Monolithic Applications&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;As the Application becomes complex and large building can take significantly more time.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;During deployment of newer versions there are down times for the application.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Less Flexible for change.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Difficulty in scaling out.&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;These cons are blockers for High Availability/Low Latency, Rapidly Evolving applications. In order to address these Software Architects tried Modular/Component programming where each functionality is developed as a separate module/component. This in fact managed to reduce the build time drastically. But the applications were still monoliths. Deploying a newer version of a module/component meant that the whole application had to stop and restarted as they are run in one process.&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Enter Microservices, According to Martin Fowler microservices means;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;i style=&quot;background: rgb(255, 255, 255); border: 0px; box-sizing: inherit; color: #303633; font-size: 16px; line-height: 22.4px; margin: 0px; outline: 0px; padding: 0px; text-align: start; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;The term &quot;Microservice Architecture&quot; has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data.&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;i style=&quot;background: rgb(255, 255, 255); border: 0px; box-sizing: inherit; color: #303633; font-size: 16px; line-height: 22.4px; margin: 0px; outline: 0px; padding: 0px; text-align: start; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style=&quot;text-align: start;&quot;&gt;&lt;span style=&quot;color: #303633; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;&quot;&gt;&lt;span style=&quot;background-color: white; font-family: Times, Times New Roman, serif; line-height: 22.4px;&quot;&gt;His illustrations clearly distinguishes a Monolithic application from a Microservices architecture.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img alt=&quot;Figure 1&quot; src=&quot;http://martinfowler.com/articles/microservices/images/sketch.png&quot; height=&quot;193&quot; width=&quot;320&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Having a Microservices based architecture means that your applications can;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;ul&gt;&lt;li&gt;Evolve rapidly and independently.&lt;/li&gt;&lt;li&gt;Deploy and test a service easily.&lt;/li&gt;&lt;li&gt;Scale out or in for demand.&lt;/li&gt;&lt;li&gt;Be polyglot (Each Microservice can be developed using separate Programming Language/Database).&lt;/li&gt;&lt;li&gt;Be developed by Small, Independent, Easy to Manage Teams&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Lets have a look at Hypothetical Microservices Application. The company MS have business cases for User Registration and Account Registration. User registration has sub use cases (Persisting User, Sending Email Account Verification, Verifying Email Account) of their own which are complex and time consuming but must be flexible for change. Account Registration means maintaining the financial aspect of the User. Furthermore there is a REST API web tier open to users and partners. The following microservices architecture can be used to implement MS company application.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-EUbJU-GJiV4/VsLzxMPKB5I/AAAAAAAADe8/WGyvDL9fkh4/s1600/Arch.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;177&quot; src=&quot;https://2.bp.blogspot.com/-EUbJU-GJiV4/VsLzxMPKB5I/AAAAAAAADe8/WGyvDL9fkh4/s320/Arch.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;For implementation we can use Spring Boot as it allows to create both Web Container based as well as Stand Alone Production Ready applications using minimal coding. There are more alternatives if you are not a fan of Spring at&amp;nbsp;&lt;a href=&quot;https://github.com/mfornos/awesome-microservices&quot;&gt;https://github.com/mfornos/awesome-microservices&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;When Rabbit MQ is installed successfully, this microservices based application is ready to run. The applications are so independent there is no order to start the microservices. Just running the Main methods of all three projects would spin up the required service.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;When a Create New User request is sent to the Web REST API it is enqueued in ms-user queue which will be dequeued and processed by User Registration microservice, which after finishing processing will enqueue another message in ms-account queue. Those messages will be handled by the Account Registration microservice.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-PrNrA0Ttg8Q/VsL_TKgUCMI/AAAAAAAADfU/NIWffWPzxLY/s1600/Request.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://4.bp.blogspot.com/-PrNrA0Ttg8Q/VsL_TKgUCMI/AAAAAAAADfU/NIWffWPzxLY/s400/Request.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Request to REST API&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-9VMbFl5oNAk/VsL_TAVicsI/AAAAAAAADfQ/3ljolb87bYQ/s1600/ms-user-reg.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;160&quot; src=&quot;https://3.bp.blogspot.com/-9VMbFl5oNAk/VsL_TAVicsI/AAAAAAAADfQ/3ljolb87bYQ/s400/ms-user-reg.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Message Dequeued from Rabbit MQ queue ms-user&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-J904S4IWBeA/VsL_TLPUgJI/AAAAAAAADfM/6dZrGVCDxko/s1600/user-account-reg.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;127&quot; src=&quot;https://3.bp.blogspot.com/-J904S4IWBeA/VsL_TLPUgJI/AAAAAAAADfM/6dZrGVCDxko/s400/user-account-reg.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Message Dequeued from Rabbit MQ queue ms-account&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;All the microservices run on their own process and can be modified, scaled out and/or in transparently. The implementation source code can be found at&amp;nbsp;&lt;a href=&quot;https://github.com/shazin/ms&quot;&gt;https://github.com/shazin/ms&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;ul&gt;&lt;li&gt;Microservices by Martin Fowler -&amp;nbsp;&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;http://martinfowler.com/articles/microservices.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Spring Boot -&lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;&amp;nbsp;http://projects.spring.io/spring-boot/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Rabbit MQ -&amp;nbsp;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;https://www.rabbitmq.com/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2016/02/the-new-buzz-word-in-information.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-EUbJU-GJiV4/VsLzxMPKB5I/AAAAAAAADe8/WGyvDL9fkh4/s72-c/Arch.png" height="72" width="72"/><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-1171291198839129697</guid><pubDate>Tue, 19 Jan 2016 12:19:00 +0000</pubDate><atom:updated>2016-01-21T03:10:07.410-08:00</atom:updated><title>RxJava and Spring Boot</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;It has been a really long time (more than six months) since I wrote my last blog post. Life was a bit busy with coming down from Malaysia and finding a new job in Sri Lanka and settling down. It doesn&#39;t mean I was not working with new technologies. Got the chance to work with alot of new technologies and frameworks.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Ok having said that while going through the usual weekly dose of InfoQ videos I was bumped on Simon Baslé and Laurent Doguin&#39;s talk on Introducing RxJava into a Spring Boot REST API.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I have blogged about Reactive programming previously in this &lt;a href=&quot;http://shazsterblog.blogspot.com/2015/03/hybrid-of-publishersubscriber-pattern.html&quot;&gt;post&lt;/a&gt;. Which is all about writing non blocking, concurrent, functional code. Two main aspects of Reactive manifesto is;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Reactive Streams (Observable in RxJava)&lt;/li&gt;&lt;li&gt;Reactive Extensions (Observer/Subscriber in RxJava)&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;But this time I wanted to go beyond and learn the cores of Reactive Programming. I build a small application which has a Service which returns an Observable (Non blocking) which can be used to asynchronously perform many tasks such filter, zip, map etc.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src=&quot;https://gist.github.com/shazin/baa132ab47e346338c89.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;This Service can be used in many ways to produces many results as we need and I have used &lt;b&gt;findAll()&lt;/b&gt; method in &lt;b&gt;findByName() &lt;/b&gt;method to filter records which are only matching the given name. Likewise this gives many more options.&lt;br /&gt;&lt;br /&gt;And in the Controller this Service can be used to retrieve the data we want and finally collect those as a List or any other way and pass it back.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/shazin/703cd80efc1ed965e374.js&quot;&gt;&lt;/script&gt; Spring a return type named DeferredResult which will send a response asynchronously when it is finished processing. Either by returning a&amp;nbsp;DeferredResult from the controller method or by writing a custom ReturnValueHandler for Observable we can send asynchronous results.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/shazin/193aeb7972ab8a7440b1.js&quot;&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The complete source code can be found at&amp;nbsp;https://github.com/shazin/reactiveapp and I strongly advice to go through the presentation in the references section.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;References&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Introducing RxJava into a Spring Boot REST API - http://www.infoq.com/presentations/rxjava-spring-boot&lt;/li&gt;&lt;li&gt;Introduction to Reactive Programming -&amp;nbsp;http://www.infoq.com/presentations/rxjava-reactor&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2016/01/rxjava-and-spring-boot.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-3242594460475247590</guid><pubDate>Thu, 02 Apr 2015 05:14:00 +0000</pubDate><atom:updated>2015-04-02T05:58:30.672-07:00</atom:updated><title>Simple Twitter Sentiment Notification System with ESP8266 Wifi + Arduino</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I am a huge fan of Cricket and die hard supporter of Sri Lankan Cricket Team. The World Cup was concluded recently with Australia emerging as champions. New Zealand were runner up and had a great tournament even though they lost the final. With cricket comes a lot of social media interaction. Trolls, Complements, Griefs, Celebrations, you name it all happens in social media platforms.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Out of this twitter stands out because in twitter you can directly interact with players involved and large audience of cricket followers. I wanted to know how twitter users are feeling and talking about cricket matches during the world cup so I developed a small, simple twitter sentiment notification system with Arduino and a recently bought ESP8266 Wifi.&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Requirement&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The requirement was to just illuminate a red or green light (out, not out in cricket :) ) based on the sentiment score of a particular tweet instead of reading the whole tweet. The idea was to keep everything as simple as possible because this is just a small project with limited usage.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;b&gt;Implementation Decision&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;For this I used Spring XD which is built for Extreme Data Processing by creating an engine to source , transform and sink from multiple data points. Furthermore I used a Redis list act as the sink from Spring XD and source for the arduino via ESP8266 over wifi.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The sentiment analysis is done by a custom written Processor module for Spring XD which just does negative word count and determines whether the tweet is negative or positive, simple but works for this simple project.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;A small java TCP server act as the intermediate between arduino via ESP8266 over wifi and Redis&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Architecture&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-5gCsLJokIio/VRzNzhBnYhI/AAAAAAAABvA/z3rPQzW6tU8/s1600/Architecture-Sentiment.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-5gCsLJokIio/VRzNzhBnYhI/AAAAAAAABvA/z3rPQzW6tU8/s1600/Architecture-Sentiment.png&quot; height=&quot;195&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;i&gt;Hardware&lt;/i&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-OQYTjht11rE/VR086IY0oNI/AAAAAAAABvY/NPMw9kgFEIQ/s1600/Schematic-Sentiment.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-OQYTjht11rE/VR086IY0oNI/AAAAAAAABvY/NPMw9kgFEIQ/s1600/Schematic-Sentiment.png&quot; height=&quot;303&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;i&gt;Software&lt;/i&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The source codes are available at&amp;nbsp;&lt;a href=&quot;https://github.com/shazin/tweetsentiments&quot;&gt;https://github.com/shazin/tweetsentiments&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Spring XD 1.1.0 was used with Redis 2.8.7, for this to work Spring XD must be started in Single Node mode with the following command&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;SPRING_XD_HOME/xd/bin/xd-singlenode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Redis server must be started with the following command&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;REDIS_HOME/src/redis-server&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;A shell must be opened to Spring XD to execute commands&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;SPRING_XD_HOME/xd/bin/xd-shell&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;in the shell following commands must be executed&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;This registers the custom sentiment processor module in Spring XD&amp;nbsp;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;module upload --file /Path/To/sent-processor-0.0.1-SNAPSHOT.jar --name sent-processor --type processor&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;i style=&quot;font-size: small;&quot;&gt;This creates the stream which sources tweets from twitter, analysis and calculates their sentiment score and sinks in redis. twittersearch --query could be anything you want to search. In this case I have added spring to focus on the word spring.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;stream create --name tweetsentiments --definition &quot;twittersearch --query=Spring --consumerKey=&lt;key&gt;&lt;consumer key=&quot;&quot;&gt; --consumerSecret=&lt;secret&gt;&lt;consumer secret=&quot;&quot;&gt; | sent-processor | redis --queue=sentiments&quot; --deploy&lt;/consumer&gt;&lt;/secret&gt;&lt;/consumer&gt;&lt;/key&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Finally the TCP server must be started and arduino sketch ESPWifi must be loaded into arduino.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;java -cp jedis-2.6.2.jar:./ Server&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Demonstration&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/v-ft7ubhJfU&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;ESP8266 Arduino Library -&amp;nbsp;&lt;a href=&quot;https://github.com/itead/ITEADLIB_Arduino_WeeESP8266&quot;&gt;https://github.com/itead/ITEADLIB_Arduino_WeeESP8266&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Spring XD -&amp;nbsp;&lt;a href=&quot;http://docs.spring.io/spring-xd/docs/current-SNAPSHOT/reference/html/&quot;&gt;http://docs.spring.io/spring-xd/docs/current-SNAPSHOT/reference/html/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Redis - &lt;a href=&quot;http://redis.io/&quot;&gt;http://redis.io/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2015/04/simple-twitter-sentiment-notification.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-5gCsLJokIio/VRzNzhBnYhI/AAAAAAAABvA/z3rPQzW6tU8/s72-c/Architecture-Sentiment.png" height="72" width="72"/><thr:total>3</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-5615524472343069671</guid><pubDate>Wed, 04 Mar 2015 08:53:00 +0000</pubDate><atom:updated>2015-03-04T01:05:33.094-08:00</atom:updated><title>Observable in Reactive Programming, Hybrid of Publisher/Subscriber Pattern and Iterator Pattern</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;As Programmers we are advised to use Design Patterns as much as possible. But making use of Design Patterns doesn&#39;t guarantee that our code becomes Flexible, Maintainable and Bug Free. But it is certainly a step towards achieving those goals.&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;When I was in University I was told by lecturers to read the book&amp;nbsp;&lt;b&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/b&gt;&lt;span style=&quot;background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.3999996185303px;&quot;&gt;&amp;nbsp;&lt;/span&gt;by authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides famously known as the Gang of Four. The authors went a long way to find the Design Patterns that are used by Industry professionals and managed to document all those in detail in a nice and understandable book.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In that book under Behavioral Patterns there were two patterns which could be taught as most widely used patterns which are Publisher/Subscriber pattern and Iterator pattern.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In brief Publisher/Subscriber pattern enables to decouple data production and consumption clearly by having Producers notify Subscribed consumers as and when data is available. And Iterator pattern enables to loop through a collection transparently without knowing underlying implementation.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;At first the two patterns looks totally different but as Jafar Husain points out in the presentation video in the references section, any problem that can be solved by Publisher/Subscriber pattern can also be solved by Iterator pattern and vice-versa.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Yet both were distinguishable from each other because with Publisher/Subscriber pattern there is no way of finding whether the Producer is finished producing data and with Iterator pattern one could do it.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Reactive Programming is a topic which is catching up in the industry and fueled by Netflix is actually an hybrid of both Publisher/Subscriber pattern and Iterator pattern. This model enables separation of Publisher/Subscriber logic along with Iterator pattern&#39;s feature of being notified of completion and exceptions. RxJava provides this model programming to be performed in Java language and it enables Declarative style of programming while producing concise code. Below is an example which shows both Declarative/Functional (RxJava based implementation) and Imperative (Core Java based implementation) doing the same task.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.io.BufferedReader;&lt;br /&gt;import java.io.InputStreamReader;&lt;br /&gt;import java.net.HttpURLConnection;&lt;br /&gt;import java.net.URL;&lt;br /&gt;import java.security.MessageDigest;&lt;br /&gt;import java.util.Arrays;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;import rx.Observable;&lt;br /&gt;import rx.Scheduler;&lt;br /&gt;import rx.schedulers.Schedulers;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * RxJava Observable vs Imperative Java Code&lt;br /&gt; * &lt;br /&gt; * @author shazin&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;public class Main {&lt;br /&gt;&lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        List&amp;lt;String&amp;gt; urls = Arrays.asList(&quot;http://www.google.com&quot;, &quot;http://www.lkbotics.com&quot;, &quot;http://www.yahoo.com&quot;);&lt;br /&gt;        &lt;br /&gt;        System.out.println(&quot;============================= Declarative/Functional ==========================================&quot;);&lt;br /&gt;        &lt;br /&gt;        Observable.from(urls)&lt;br /&gt;                //.subscribeOn(Schedulers.io()) // Uncommenting this line will enable concurrent execution&lt;br /&gt;                .flatMap(url -&amp;gt; Observable.just(getHtml(url)))&lt;br /&gt;                .filter(html -&amp;gt; html != null &amp;amp;&amp;amp; html.toString().length() &amp;gt; 0)&lt;br /&gt;                .doOnNext(html -&amp;gt; saveHtml(html))&lt;br /&gt;                .map(html -&amp;gt; getTitle(html))&lt;br /&gt;                .doOnError(t -&amp;gt; System.out.println(&quot;Error : &quot;+t))&lt;br /&gt;                .doOnCompleted(() -&amp;gt; {System.out.println(&quot;Completed!&quot;);})&lt;br /&gt;                .subscribe(title -&amp;gt; System.out.println(title));&lt;br /&gt;        &lt;br /&gt;        System.out.println(&quot;=================================== Imperative ================================================&quot;);&lt;br /&gt;        &lt;br /&gt;        for(String url:urls) {&lt;br /&gt;            try {&lt;br /&gt;                String html = getHtml(url);&lt;br /&gt;                if(html != null &amp;amp;&amp;amp; html.length() &amp;gt; 0) { &lt;br /&gt;                    saveHtml(html);&lt;br /&gt;                    System.out.println(getTitle(html));&lt;br /&gt;                }&lt;br /&gt;            } catch(Exception e) {&lt;br /&gt;                System.out.println(&quot;Error : &quot;+e);&lt;br /&gt;                break;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        System.out.println(&quot;Completed!&quot;);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static String getHtml(String url) {&lt;br /&gt;        System.out.printf(&quot;Retrieving Html for url : %s\n&quot;, url);&lt;br /&gt;        StringBuilder out = new StringBuilder();&lt;br /&gt;        HttpURLConnection httpURLConnection = null;&lt;br /&gt;        try {&lt;br /&gt;            httpURLConnection = (HttpURLConnection) new URL(&lt;br /&gt;                    url).openConnection();&lt;br /&gt;            try (BufferedReader br = new BufferedReader(new InputStreamReader(&lt;br /&gt;                    httpURLConnection.getInputStream()))) {&lt;br /&gt;&lt;br /&gt;                String line = null;&lt;br /&gt;                while ((line = br.readLine()) != null) {&lt;br /&gt;                    out.append(line).append(&quot;\n&quot;);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        } catch (Exception e) {&lt;br /&gt;            throw new RuntimeException(e);&lt;br /&gt;        } finally {&lt;br /&gt;            if(httpURLConnection != null) {&lt;br /&gt;                httpURLConnection.disconnect();&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        return out.toString();&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static String getTitle(String html) {&lt;br /&gt;        String content = html.toLowerCase();&lt;br /&gt;        return html.substring(content.indexOf(&quot;&amp;lt;title&amp;gt;&quot;) + 7, content.indexOf(&quot;&amp;lt;/title&amp;gt;&quot;));&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static void saveHtml(String html) {&lt;br /&gt;        try {&lt;br /&gt;            MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);&lt;br /&gt;            byte[] data = digest.digest(html.getBytes(&quot;UTF-8&quot;));&lt;br /&gt;            &lt;br /&gt;            System.out.printf(&quot;Saving html for %s : %s\n&quot;, getTitle(html), hex(data));&lt;br /&gt;        } catch (Exception e) {&lt;br /&gt;            throw new RuntimeException(e);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static String hex(byte[] data) {&lt;br /&gt;        StringBuilder hex = new StringBuilder();&lt;br /&gt;        for(byte d:data) {&lt;br /&gt;            hex.append(String.format(&quot;%x&quot;, d &amp;amp; 0xFF));&lt;br /&gt;        }&lt;br /&gt;        return hex.toString();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;The real power and flexibility of Reactive Programming against Imperative Programming is its ability scale and produce low response time. Just for example to run the tasks concurrently, un-commenting the&amp;nbsp;&lt;span style=&quot;background-color: #eeeeee; font-family: &#39;Andale Mono&#39;, &#39;Lucida Console&#39;, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; text-align: left;&quot;&gt;//.subscribeOn(Schedulers.io())&lt;/span&gt; line would suffice whereas running the imperative tasks concurrently would require a lot more &amp;nbsp;careful coding.&lt;br /&gt;&lt;br /&gt;There are plenty of more benefits of Reactive Programming and this post doesn&#39;t cover all of them, Please go through the References section to learn more.&lt;/div&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Asynchronous Programming at Netflix -&amp;nbsp;&lt;b&gt;&lt;a href=&quot;http://www.infoq.com/presentations/async-programming-netflix&quot;&gt;Jafar Husain&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;ReactiveX -&amp;nbsp;&lt;a href=&quot;http://reactivex.io/intro.html&quot;&gt;http://reactivex.io/intro.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;RxJava Tutorial -&amp;nbsp;&lt;a href=&quot;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&quot;&gt;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2015/03/hybrid-of-publishersubscriber-pattern.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-4688026082558506957</guid><pubDate>Mon, 26 Jan 2015 09:30:00 +0000</pubDate><atom:updated>2015-01-26T01:30:40.699-08:00</atom:updated><title>Anti Pattern - ThreadLocal variables with Thread Pool</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In a previous post&amp;nbsp;I wrote the usage and benefits of ThreadLocal based instance variables in concurrent applications. This seemingly innocent and fail proof implementation will provide clear data separation and visibility between threads in multi threaded applications UNTIL, you use Thread Pooling.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;ThreadLocal variables as the name suggest is local to the thread, til the thread is alive the ThreadLocal instance variable can not be Garbage Collected. This &lt;a href=&quot;https://plumbr.eu/blog/how-to-shoot-yourself-in-foot-with-threadlocals&quot;&gt;post&lt;/a&gt;&amp;nbsp;explains the theory clearly.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;To see it in action I wrote small program which infinitely creates Tasks in one implementation submitting tasks to a Thread Pool and in another instance creating ad-hoc Threads which are no pooled. And I used jVisualVM to monitor the VM.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.concurrent.ExecutorService;&lt;br /&gt;import java.util.concurrent.Executors;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class ThreadLocalTest {&lt;br /&gt;&lt;br /&gt;    private static ExecutorService executor = Executors.newFixedThreadPool(100);&lt;br /&gt;    &lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        while(true) {&lt;br /&gt;            // Thread Pooled based implementation&lt;br /&gt;            executor.execute(new SimpleThread());&lt;br /&gt;            // Ad-hoc Thread based implementation&lt;br /&gt;            new SimpleThread().start();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static class SimpleThread extends Thread {&lt;br /&gt;        &lt;br /&gt;        private ThreadLocal&amp;lt;Integer&amp;gt; no = new ThreadLocal&amp;lt;Integer&amp;gt;() {&lt;br /&gt;&lt;br /&gt;            @Override&lt;br /&gt;            protected Integer initialValue() {&lt;br /&gt;                return 0;&lt;br /&gt;            }&lt;br /&gt;            &lt;br /&gt;        };&lt;br /&gt;        &lt;br /&gt;        public void run() {&lt;br /&gt;            while(no.get() &amp;lt; 100) {&lt;br /&gt;                no.set(no.get() + 1);&lt;br /&gt;            }&lt;br /&gt;            System.out.println(String.format(&quot;Thread : %s Finished&quot;, Thread.currentThread().getName()));&lt;br /&gt;            no.remove();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In the Thread pooled implementation one thread throwing an&amp;nbsp;&lt;b&gt;Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread &quot;Thread Name&quot; &lt;/b&gt;is just a matter of time.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Where as the adhoc Thread creation seems to keep on running with good VM Garbage Collection but the Thread pool implementation fills up the heap space within minutes and eventually runs out of memory.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Lesson&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Always keep an eye on the Thread classes you use in your application, make sure they don&#39;t have ThreadLocal variables when you are using Thread Pooling.&lt;br /&gt;&lt;br /&gt;Give special care when you get pre-compiled third party libraries which might have ThreadLocal so always read javadocs thoroughly when you use Thread pooling.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2015/01/anti-pattern-threadlocal-variables-with.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-1791176791512150980</guid><pubDate>Wed, 24 Dec 2014 02:39:00 +0000</pubDate><atom:updated>2015-04-18T05:57:20.245-07:00</atom:updated><title>IoT with MQTT + Apache Kafka (Arduino + Raspberry Pi)</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Motivation&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Internet of Things always fascinated me because of the sheer no of people talking about it and the no of projects coming up related to it. So I thought I should give it a go myself and put up a small demonstration to learn the concepts of IoT projects.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This project is about implementing a IoT system to measure illumination inside of a house and act upon when there is low illumination by illuminating a light. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Design&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;i&gt;Architecture&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-Gl6wi_zlZAw/VJmRxulwkPI/AAAAAAAABsE/6vZzjsMIOT0/s1600/drawing.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-Gl6wi_zlZAw/VJmRxulwkPI/AAAAAAAABsE/6vZzjsMIOT0/s1600/drawing.png&quot; height=&quot;400&quot; width=&quot;386&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;i&gt;Arduino&amp;nbsp;+ Photoresistor Schematic&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-jNbCkSOK5mQ/VJojGbXhY9I/AAAAAAAABsc/ekZjWmvyl94/s1600/Arduino_Schematic.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-jNbCkSOK5mQ/VJojGbXhY9I/AAAAAAAABsc/ekZjWmvyl94/s1600/Arduino_Schematic.png&quot; height=&quot;233&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;i&gt;Raspberry Pi&amp;nbsp;+ LED Schematic&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-N4BDE4jArdk/VJojRimCxFI/AAAAAAAABsk/V80C46nXAEQ/s1600/Raspi_Schematic.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-N4BDE4jArdk/VJojRimCxFI/AAAAAAAABsk/V80C46nXAEQ/s1600/Raspi_Schematic.png&quot; height=&quot;238&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;b&gt;Implementation Decisions&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I could have easily connected the Arduino and Raspberry Pi directly and get the thing done but I wanted to learn the correct and hard way to do as that is the whole purpose of this project. After some research on the internet I found that the best way to connect CPU and Memory constraint devices to IoT system is by using a protocol called MQTT. MQTT is a pub/sub protocol with a very small (2 byte) header which is ideal for small devices such as Arduino and reduces bandwidth usage when sending data across networks.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;But my aim was not fulfilled with this, what I wanted to implement is a system where more and more devices can be connected both as publishers of parameters (Illumination, Temperature, Humidity, etc.) and as consumers of those parameters in a scalable, decoupled manner. So after some more research I found that there are messaging queues used to enable this decoupling and scalability concerns. During my research I found that there is a upcoming tool named Apache Kafka which is capable of delivering what I am expecting in a more secure fault tolerant manner, so I decided to have it a go and see.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;Implementation&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;i&gt;Hardware&lt;/i&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Arduino UNO Development Board&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Raspberry Pi Model B&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Ethernet Shield&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Wifi Adaptor (Dongle)&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Photoresistor&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 LED&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Resistors&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;1 Wireless Router with LAN Port&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;i&gt;Software&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;All Software used in this project is available at&amp;nbsp;&lt;a href=&quot;https://github.com/shazin/iot&quot;&gt;https://github.com/shazin/iot&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Prerequisites&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Apache Kafka must be downloaded and configured to be started on a PC/Laptop, MQTT Server mosquitto must also be running.&lt;br /&gt;&lt;br /&gt;For Apache Kafka refer this url&amp;nbsp;&lt;a href=&quot;http://kafka.apache.org/documentation.html#gettingStarted&quot;&gt;Kafka Getting Started&lt;/a&gt;&lt;br /&gt;For Mosquitto refer this url&amp;nbsp;&lt;a href=&quot;http://mosquitto.org/&quot;&gt;Mosquitto&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;b&gt;Demonstraton&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vVRy-WxNkes&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;The Terminal Tabs in the video have the following started;&lt;br /&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Mosquitto Server&amp;nbsp;&lt;/li&gt;&lt;li&gt;Zookeeper Server for Apache Kafka&lt;/li&gt;&lt;li&gt;Apache Kafka Server&lt;/li&gt;&lt;li&gt;Apache Kafka Consumer consuming on topic illumination&lt;/li&gt;&lt;li&gt;SSH session to raspberry pi which is running illumination.py python script&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;And the Spring Source IDE is running Mqtt Kafka Bridge.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;When the Photoresistor in Arduino is cover the illumination parameter drops below 300 which will trigger the LED in Raspberry Pi to illuminate.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Lessons Learnt&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The approach I tried is very responsive and is easy to scale because of the decoupling I have done by using Mosquitto and Apache Kafka. I didn&#39;t see any lags in Raspberry Pi consumer or Arduino Producer. This is may be required for System with lower latency SLAs.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Future Work&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;As this is my first attempt at IoT systems, I have left out security and device identification aside. But these are highly required in a fully fledged IoT system. Planning to work on them in the future.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Samza in LinkedIn: How LinkedIn Processes Billions of Events Everyday in Real-time -&amp;nbsp;&lt;a href=&quot;http://www.infoq.com/presentations/samza-linkedin-2014&quot;&gt;Neha Narkhede&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Federated Identity for IoT with OAuth - &lt;a href=&quot;http://www.infoq.com/presentations/federated-identity-IoT-OAuth&quot;&gt;Paul Fremantle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mumrah/kafka-python&quot;&gt;Python Kafka&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/08/api.html&quot;&gt;Kafka Java API&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/fusesource/mqtt-client&quot;&gt;MQTT Java API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/knolleary/pubsubclient&quot;&gt;Arduino Pub/Sub Client&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/12/iot-with-mqtt-apache-kafka-arduino.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-Gl6wi_zlZAw/VJmRxulwkPI/AAAAAAAABsE/6vZzjsMIOT0/s72-c/drawing.png" height="72" width="72"/><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-592219854752230110</guid><pubDate>Thu, 13 Nov 2014 03:17:00 +0000</pubDate><atom:updated>2014-11-12T22:17:17.052-08:00</atom:updated><title>Java 8 : Not a Paradigm Shift. Just Revisiting the Old Roots 2</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This post is a continuation of previous &lt;a href=&quot;http://shazsterblog.blogspot.com/2014/11/java-8-not-paradigm-shift-just.html&quot;&gt;post&lt;/a&gt;.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Recently I was privileged enough to see two great talks by two Industry Experts. Namely Jessica Kerr and Dr. Venkat Subramaniam and I have the links to those talks at references section and I strongly advise to watch those. First I watched Jessica Kerr&#39;s talk on &lt;i&gt;Functional Principles for Object-Oriented Developers&lt;/i&gt; and secondly I watched Dr. Subramaniam&#39;s talk on&amp;nbsp;J&lt;i&gt;ava 8 Language Capabilities. What&#39;s in It for You?. &lt;/i&gt;I am really glad that I watched those videos in that order because it made me understand the problems prior to Java 8 and how Java 8 has solved those problems elegantly.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Main takeouts from Jessica&#39;s talk are the followings;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Function/Methods should not modify shared mutable states.&lt;/li&gt;&lt;li&gt;Function/Methods should not modify input parameters.&lt;/li&gt;&lt;li&gt;Function/Methods should not do harm to the world.&lt;/li&gt;&lt;li&gt;Function/Methods should not change the execution flow (Exceptions must be returned as data not thrown).&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;She clearly goes through the benefits of being functional and how it can be achieved in different languages including Java prior to Java 8 using Google Guava library. She further explains that our code must move away from being Imperative to being more Functional/Declarative. In the sense we must say what we are need to do but not how to do it. One great example she points out is SQL. SQL language is highly declarative where we don&#39;t care how Oracle, MySQL, MS SQL RDBMS&#39;s store data underneath. We just say I want all the data of customers by just issuing &quot;&lt;i&gt;&lt;b&gt;SELECT * FROM Customers&lt;/b&gt;&lt;/i&gt;&quot;. This is a really strong concept because this gives the actual Oracle, MySQL, MS SQL implementations to change transparently without ever breaking the client code. Those RDBMS&#39;s can retrieve data sequentially, parallel or in any other form. More on this through the words of Jessica herself;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&quot;The power of SQL&#39;s declarative style isn&#39;t about swapping out Oracle for MySQL; any standard can do that. It&#39;s more about, for a given query, the database is free to swap out its strategy based on the shape of the data.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Say you want to count customers in the UK with open orders. (approximate syntax, crude table design)&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;b&gt;&lt;i&gt;SELECT COUNT(DISTINCT customer_id) FROM customers JOIN orders ON customer_id&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;WHERE orders.status = &#39;OPEN&#39;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;AND customer.country = &#39;UK&#39;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;If both tables are small, the database might start with the join and then filter.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;If the order table is huge but very few of them are OPEN, the database might start by finding open orders, then connect them to customers, then filter again.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;If the customers table is partitioned, the database might split up the table and run in parallel on each partition.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;This is the power of a declarative style, of telling the database WHAT to do, not HOW to go about it. All within one underlying database implementation!&quot;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dr. Subramaniam&#39;s talk further verifies the claims of Jessica and explains in detail how Java 8 allows Developers to make the transition from being Imperative to being more Functional/Declarative by introducing Lambda Expressions and Streams. Lambda Expressions makes functions act also as first class citizens allowing Functional/Declarative style coding. One code excerpt I took from Dr. Subramaniam&#39;s talk is the following;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.List;&lt;br /&gt;import java.util.Arrays;&lt;br /&gt;import java.util.function.Consumer;&lt;br /&gt;&lt;br /&gt;public class Sample {&lt;br /&gt;&lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;br /&gt;&lt;br /&gt;        //Imperative&lt;br /&gt;        //External Iteration&lt;br /&gt;&lt;br /&gt;        for(int i = 0;i&amp;lt;numbers.size();i++) {&lt;br /&gt;            System.out.println(numbers.get(i));&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;            System.out.println(e);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        //Internal Iteration&lt;br /&gt;&lt;br /&gt;        numbers.forEach(new Consumer&amp;lt;Integer&amp;gt;() {&lt;br /&gt;            public void accept(Integer no) {&lt;br /&gt;                System.out.println(no);&lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;&lt;br /&gt;        numbers.forEach((Integer no) -&amp;gt; System.out.println(no));&lt;br /&gt;&lt;br /&gt;        numbers.forEach((no) -&amp;gt; System.out.println(no));&lt;br /&gt;&lt;br /&gt;        numbers.forEach(no -&amp;gt; System.out.println(no));&lt;br /&gt;&lt;br /&gt;        numbers.forEach(System.out::println);&lt;br /&gt;&lt;br /&gt;        //Functional/Declarative&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The above code can be described as the blue print of Imperative to Functional/Declarative evolution in Java. The code begins being highly Imperative where we need to tell how to loop a Collection of numbers then it gradually evolves to become a highly Functional/Declarative where Iteration and Logic is handed over to the Collection itself. All the codes print out the same results.&lt;br /&gt;&lt;br /&gt;Furthermore he shows how mutations takes place with Imperative code and how we can eliminate mutations by making use of Functional/Declarative style of coding in Java 8. Following code describes;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.List;&lt;br /&gt;import java.util.Arrays;&lt;br /&gt;import java.util.function.*;&lt;br /&gt;&lt;br /&gt;public class Sample1 {&lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;br /&gt;&lt;br /&gt;        // Imperative&lt;br /&gt;        int total = 0;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;            total += e;&lt;br /&gt;        }    &lt;br /&gt;        System.out.println(total);&lt;br /&gt;&lt;br /&gt;        // Functional/Declarative&lt;br /&gt;        System.out.println(numbers.stream()&lt;br /&gt;                                  .reduce(0, (c, e) -&amp;gt; { return c + e; }));&lt;br /&gt;&lt;br /&gt;        // Imperative&lt;br /&gt;        total = 0;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;            if(e % 2 == 0) {&lt;br /&gt;                total += e;&lt;br /&gt;            }&lt;br /&gt;        }     &lt;br /&gt;        System.out.println(total);&lt;br /&gt;&lt;br /&gt;        // Functional/Declarative&lt;br /&gt;                System.out.println(numbers.stream()&lt;br /&gt;                                          .filter(e -&amp;gt; e % 2 == 0)&lt;br /&gt;                                          .reduce(0, (c, e) -&amp;gt; { return c + e; }));&lt;br /&gt;        &lt;br /&gt;        // Imperative&lt;br /&gt;        total = 0;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;              total += (e * 2);&lt;br /&gt;        }     &lt;br /&gt;        System.out.println(total);&lt;br /&gt;&lt;br /&gt;        // Functional/Declarative&lt;br /&gt;                System.out.println(numbers.stream()&lt;br /&gt;                                          .map(e -&amp;gt; e * 2)&lt;br /&gt;                                          .reduce(0, (c, e) -&amp;gt; { return c + e; }));&lt;br /&gt;&lt;br /&gt;        // Imperative&lt;br /&gt;        int no = 0;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;             if(e &amp;gt; 3 &amp;amp;&amp;amp; e % 2 == 0) {&lt;br /&gt;                 no = e;&lt;br /&gt;                 break;&lt;br /&gt;             }  &lt;br /&gt;        }     &lt;br /&gt;        System.out.println(no);&lt;br /&gt;&lt;br /&gt;        // Functional/Declarative&lt;br /&gt;        System.out.println(numbers.stream()&lt;br /&gt;                                  .filter(e -&amp;gt; e &amp;gt; 3)&lt;br /&gt;                                  .filter(e -&amp;gt; e % 2 == 0)&lt;br /&gt;                                  .findFirst()&lt;br /&gt;                                  .orElse(0));&lt;br /&gt;&lt;br /&gt;        // Imperative&lt;br /&gt;        System.out.println(total(numbers, e -&amp;gt; true));&lt;br /&gt;        System.out.println(total(numbers, e -&amp;gt; e % 2 == 0));&lt;br /&gt;        System.out.println(total(numbers, e -&amp;gt; e % 2 == 1));&lt;br /&gt;&lt;br /&gt;        // Functional/Declarative&lt;br /&gt;        System.out.println(total2(numbers, e -&amp;gt; true));&lt;br /&gt;        System.out.println(total2(numbers, e -&amp;gt; e % 2 == 0));&lt;br /&gt;        System.out.println(total2(numbers, e -&amp;gt; e % 2 == 1));&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static int total(List&amp;lt;Integer&amp;gt; numbers, Predicate&amp;lt;Integer&amp;gt; condition) {&lt;br /&gt;        int total = 0;&lt;br /&gt;        for(int e:numbers) {&lt;br /&gt;            if(condition.test(e)) {&lt;br /&gt;                total += e;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        return total;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static int total2(List&amp;lt;Integer&amp;gt; numbers, Predicate&amp;lt;Integer&amp;gt; condition) {&lt;br /&gt;        return numbers.stream()&lt;br /&gt;                      .filter(condition)&lt;br /&gt;                      .reduce(0, (c, e) -&amp;gt; c + e);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The fact of the matter is Imperative code with mutations can cause headaches and hair loss if they need parallelism. Where as the Functional/Declarative style of coding in the above code can be parallelized by just changing &quot;numbers.stream()&quot; to &quot;numbers.parallelStream()&quot;. That&#39;s it.&lt;br /&gt;&lt;br /&gt;This is because in Functional/Declarative we are saying what needs to be done not how to do it. So how to do it can be decided by the JVM just as how RDBMS decide how to retrieve data for a particular SQL query. Furthermore Functional/Declarative style is combined with Lazy (Efficient) execution where there are Intermediate (map, filter) and Terminal (reduces, findFirst) functions. The Stream will not be evaluated until we call a Terminal function making our code efficient.&lt;br /&gt;&lt;br /&gt;Both of the speaker agree on one thing. Familiar code is not necessarily Readable code. Just because we have written for loops to iterate a zillion times doesn&#39;t mean it is not complex. Don&#39;t be fooled by thinking that because Java 8 Functional/Declarative style of coding is Complex because it looks Unfamiliar. May be it is the best and efficient way to do what you really want to do.&lt;br /&gt;&lt;br /&gt;I would like to end this by a quote by Dr. Subramaniam, he states &quot;The biggest change in Java 8 are in the minds of the programmers&quot;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Functional Principles for Object-Oriented Developers -&amp;nbsp;&lt;a href=&quot;http://www.infoq.com/presentations/fp-principles-oop&quot;&gt;By Jessica Kerr&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Java 8 Language Capabilities. What&#39;s in It for You? -&amp;nbsp;&lt;a href=&quot;http://www.infoq.com/presentations/java8-streams-lambda&quot;&gt;By Dr. Venkat Subramaniam&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/11/java-8-not-paradigm-shift-just_12.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>2</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-2073750924039775559</guid><pubDate>Thu, 13 Nov 2014 02:08:00 +0000</pubDate><atom:updated>2014-11-12T18:08:18.493-08:00</atom:updated><title>Java 8 : Not a Paradigm Shift. Just Revisiting the Old Roots 1</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;When I started my Bachelor&#39;s in Software Engineering back in 2007 during very early stages I was attending a Module for Programming Principles and there the lecturer said that our programs must never use global variables (Module was using C++)&amp;nbsp;and each problem should be broken into a Function/Method essentially the practice Functional Decomposition. But during this time I was working as a Java Developer for a Company and my inner Java Developer opposed to this.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-66P5puiatx0/VGQRTb-uVbI/AAAAAAAABrA/GzAC55AIHIE/s1600/baby_confused.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//1.bp.blogspot.com/-66P5puiatx0/VGQRTb-uVbI/AAAAAAAABrA/GzAC55AIHIE/s1600/baby_confused.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;As Java being an Object Oriented Programming language, we are advised to think in terms of Objects rather than Function/Method. Practically functions/methods are second class citizens in Java. There is no way a Function/Method can exist without it being attached to a Class or being part of an Object. So I thought Functional Decomposition is old school and was only applicable for languages that is highly function oriented like C/C++.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;But couple of years back I started reading the book Java Concurrency in Practice book and it stated that thread safety is all about protecting shared mutable state. If a Class in Java has no instance or static variables that Class becomes thread safe. One theory I learned from that book is that,&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&quot;If there are shared mutable states in a Class and if more than one thread reads those states and also if at least one thread modifies those states then access (read/modification) to those states must be synchronized&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;So it all came back to me, What I learnt in 2007 as part of my Bachelor&#39;s is actually part of Java also. Global variables can be considered as shared mutable states. It is better if a Class has lesser no of shared mutable states so that in can become more concurrent friendly. Because synchronization is costly, be it Monitor lock, Copy-On-Write, Compare-And-Swap, etc. all must be used to a minimum level with shared mutable variables or the program performance can degrade.&lt;br /&gt;&lt;br /&gt;Best approach is Immutability in classes. Immutable classes are inherently thread safe and performance degrading is not a concern. For example Java String class immutable being that after instantiate and initialization its state can not be modified. Invoking almost every Method on a String object will produce a new String object.&lt;br /&gt;&lt;br /&gt;Furthermore the theory I learned in 2007 is so much alive today. Functional Decomposition is actually the ideal solution for today&#39;s problems. Problems broken down into Functions/Methods are easier to code/test/debug/maintain.&lt;br /&gt;&lt;br /&gt;Next we&#39;ll see how Java 8 Helps to achieve Immutability and Functional Decomposition.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Java Concurrency in Practice -&amp;nbsp;&lt;a href=&quot;http://jcip.net/&quot;&gt;http://jcip.net/&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/11/java-8-not-paradigm-shift-just.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-1963576404707744849</guid><pubDate>Wed, 22 Oct 2014 14:51:00 +0000</pubDate><atom:updated>2014-10-22T18:42:37.826-07:00</atom:updated><title>Neo4j Graph Database Backend for Spring Security Acl 2</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Problem&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Discussed in previous&amp;nbsp;&lt;a href=&quot;http://shazsterblog.blogspot.com/2014/10/neo4j-graph-database-backend-for-spring.html&quot;&gt;post&lt;/a&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Design&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The first challenge was Modelling a set of Tables with Relationships to a Graph. After studying the Tables and Their Relationships I came up with the following Design.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-6l-kegHSXSI/VEe35j1XEII/AAAAAAAABqI/j1TcQrrUIHU/s1600/Graph.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-6l-kegHSXSI/VEe35j1XEII/AAAAAAAABqI/j1TcQrrUIHU/s1600/Graph.png&quot; height=&quot;282&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This design can be improved but I stuck with this because the intention was to increase performance not to win a Design competition. Furthermore this design covers the Domain of Spring Security ACL concisely so I stuck with this. Naming of the relationships could be improved but I like these.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In order to successfully provide a Neo4j back-end for Spring Security ACL we must implement three interfaces with Neo4j specific implementation.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;LookupStrategy - Used to Read Acls based on Class Name and Instance Id&lt;/li&gt;&lt;li&gt;AclService - Non Mutable Acl related Services&lt;/li&gt;&lt;li&gt;MutableAclService - Mutable Acl related Services&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Implementation Decisions&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;I used Spring-Data-Neo4j project which is an abstraction layer on top of the Neo4j Graph Database which allows annotated classes to be represented as Nodes and Edges, which is convenient for Rapid Development. Furthermore it allows Repositories to do CRUD operations also but in this project I opted not to use them and instead used Neo4jTemplate because I knew I would need to write alot of Dynamic Cypher queries.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Development&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The full source of the development is available at&amp;nbsp;&lt;a href=&quot;https://github.com/shazin/spring-security-acl-neo4j&quot;&gt;https://github.com/shazin/spring-security-acl-neo4j&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Testing&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The biggest question is &quot;Will it be faster than RDBMS based implementations?&quot;. If not the whole project was a failure. Test coverage was done on both Mutable and Non Mutable Acl Services. Testing Non Mutable Acl Service will cover Lookup Strategy as it is used underneath.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Neo4j In-memory Test Database was used to Test. This is a JVM based, Production Not Ready, Single Database instance. Assuming Production ready Neo4j Embedded or Neo4j Server Databases will increase performance (It ideally should) I decided to test using this.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The RDBMS I used to Test against was H2, which is also a JVM based, but Production Ready In-memory Database.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Both being in-memory implementations and being JVM based somewhat testifies that the underlying Storage hardware has no input in performance (SATA, SSD, doesn&#39;t matter) and no latency due to Network congestion.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;And I was using the Ubuntu 14.04 LTS 64-bit Operating system with Intel Core i7 Processor, 4 Gb RAM and Sun JDK 8.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Test Data comprised of 200 ACL Entries (2 for each Object Identity), 3 Sids (Including logged in User Sid), 100 Classes and 100 Object Identities.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Testing was mainly focused on Retrieval and for to retrieve 50 non following Object Identities with ACL Entries (2 for each Object Identity) while running four random times with an Empty Cache, following were the results.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-iST59H-tyV8/VEfA8YfatUI/AAAAAAAABqY/DoSA4J9kao4/s1600/Chart.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-iST59H-tyV8/VEfA8YfatUI/AAAAAAAABqY/DoSA4J9kao4/s1600/Chart.jpg&quot; height=&quot;221&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The results are in Nanoseconds and Neo4j based Spring Security Acl implementation is a clear winner!&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Neo4j clearly stands up for its claims and with this implementation Spring Security ACL could also reach its fullest potential. Can clearly say that this is one of the fastest backend implementations for Spring Security ACL. Even though the difference is in Nanoseconds, the performance will matter with higher volume of Users, Object Identities, Sids and ACL Entries.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The code base could be improved, specially in Cypher queries thus increasing performance even more. Anyone who likes to contribute is welcome.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This doesn&#39;t mean that RDBMS are now obsolete. I personally think that RDBMS will be here for at least another 20 years if not more!&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;And constructive criticism is always welcome.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;http://neo4j.com/docs/stable/introduction.html - Cypher Language&lt;/li&gt;&lt;li&gt;http://www.h2database.com/html/main.html - H2 Database&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/10/neo4j-graph-database-backend-for-spring_22.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-6l-kegHSXSI/VEe35j1XEII/AAAAAAAABqI/j1TcQrrUIHU/s72-c/Graph.png" height="72" width="72"/><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-8022669798809957388</guid><pubDate>Wed, 22 Oct 2014 13:26:00 +0000</pubDate><atom:updated>2014-10-22T06:26:36.267-07:00</atom:updated><title>Neo4j Graph Database Backend for Spring Security Acl 1</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;As part of work here at Mimos, I have been working a lot with Spring Security. Some of my previous posts are testament for this. I even got the chance to work with Spring Security ACL which is a project which also comes under Spring Security eco-system and covers the &quot;Authorization&quot; part of Security. I feel Spring Security ACL project is seriously under-rated and one factor which stops it from reaching its fullest potential is in my opinion its Data store end.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Predominantly design to work with a Relational Database, Spring Security ACL Team have done a great job to reduce the round trips to fetch data from Database by using Caching extensively which decreases data read time heavily. &amp;nbsp;Yet in a production system where ACL data also tend to change rapidly and with higher volume of users, ACLs and Objects to Protect, Bottleneck at Data end is inevitable.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Furthermore Spring Security ACL Data is distributed in 4 tables named acl_sid, acl_class, acl_object_identity and acl_entry. So to query and retrieve ACL entries for a Principal or Role for a Particular class instance, Joining of these 4 tables is required.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Also I got the exposure to do a Research and Development on Neo4j Graph Database which is a NoSQL, Schema-less, Graph Database which stores Data in the form of Property Nodes and Edges.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Neo4j is widely used in the Industry from Courier Route Decision Making to Finding a Date Match. Neo4j is said to be really good to represent Highly Connected Data because it stores all the Data in a Graph and said to be able to Model the real world as close as possible.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;While reading through Neo4j Use Cases, I found that a Telecommunication company has used Neo4j for its Identity and Access Management system to improve performance. With Neo4j they have managed to reduce load time from Minutes to Milliseconds.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This got me thinking and lit a light bulb over my head. What if I can write a Data backend for Spring Security ACL using Neo4j? Easier said than done. Neo4j being a Graph Database is a completely different paradigm with its own query language to named Cypher.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;References&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;http://docs.spring.io/spring-security/site/docs/3.0.x/reference/domain-acls.html - Spring Security Acl&lt;/li&gt;&lt;li&gt;http://neo4j.com/ - Neo4j&lt;/li&gt;&lt;li&gt;http://neo4j.com/users/telenor/ - Telecom Use Case&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/10/neo4j-graph-database-backend-for-spring.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-4211056997580939227</guid><pubDate>Tue, 30 Sep 2014 15:17:00 +0000</pubDate><atom:updated>2014-09-30T08:20:39.890-07:00</atom:updated><title>Spring Security Filter Chain Registration Using WebApplicationInitializer for Servlet 3.x</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Starting from Servlet 3.x Specification some code saving features have been introduced such as XML less annotation based Servlet and Filter registration. In conjunction with this Spring has introduced &lt;i&gt;WebApplicationInitializer&lt;/i&gt; interface which allows the registration of Servlet and Filters using Java instead of using web.xml file.&lt;br /&gt;&lt;br /&gt;This is neat feature because this will eliminate the need for the XML files required in the Spring MVC based web applications. Since most of the Spring Application Context configurations are also directing towards Java Config, Moving to would be ideal;&lt;br /&gt;&lt;br /&gt;I read the documentation of the Spring WebApplicationInitializer and was able to register both DispatcherServlet and DelegatingFilterProxy in using it. So the following web.xml tags;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;&lt;br /&gt;    &amp;lt;param-name&amp;gt;contextClass&amp;lt;/param-name&amp;gt;&lt;br /&gt;    &amp;lt;param-value&amp;gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/context-param&amp;gt;&lt;br /&gt;  &amp;lt;context-param&amp;gt;&lt;br /&gt;      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br /&gt;      &amp;lt;param-value&amp;gt;com.lkbotics.visualizer.config.AppConfig&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/context-param&amp;gt;&lt;br /&gt;  &amp;lt;listener&amp;gt;&lt;br /&gt;    &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;&lt;br /&gt;  &amp;lt;/listener&amp;gt;&lt;br /&gt;  &amp;lt;filter&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;filter-class&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-class&amp;gt;&lt;br /&gt;      &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;&lt;br /&gt;  &amp;lt;/filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;filter&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;eTagFilter&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;filter-class&amp;gt;org.springframework.web.filter.ShallowEtagHeaderFilter&amp;lt;/filter-class&amp;gt;&lt;br /&gt;      &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;&lt;br /&gt;  &amp;lt;/filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;eTagFilter&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;appServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;    &amp;lt;init-param&amp;gt;&lt;br /&gt;        &amp;lt;param-name&amp;gt;contextClass&amp;lt;/param-name&amp;gt;&lt;br /&gt;        &amp;lt;param-value&amp;gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&amp;lt;/param-value&amp;gt;&lt;br /&gt;    &amp;lt;/init-param&amp;gt;&lt;br /&gt;    &amp;lt;init-param&amp;gt;&lt;br /&gt;        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br /&gt;          &amp;lt;param-value&amp;gt;com.lkbotics.visualizer.web.config.MvcConfig&amp;lt;/param-value&amp;gt;&lt;br /&gt;    &amp;lt;/init-param&amp;gt;&lt;br /&gt;    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;br /&gt;    &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;&lt;br /&gt;  &amp;lt;/servlet&amp;gt;&lt;br /&gt;  &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;appServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Can effectively be replaced by the following implementation of WebApplicationInitializer &lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import javax.servlet.FilterRegistration;&lt;br /&gt;import javax.servlet.ServletContext;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.ServletRegistration;&lt;br /&gt;&lt;br /&gt;import org.springframework.web.WebApplicationInitializer;&lt;br /&gt;import org.springframework.web.context.ContextLoaderListener;&lt;br /&gt;import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;&lt;br /&gt;import org.springframework.web.filter.DelegatingFilterProxy;&lt;br /&gt;import org.springframework.web.filter.ShallowEtagHeaderFilter;&lt;br /&gt;import org.springframework.web.servlet.DispatcherServlet;&lt;br /&gt;&lt;br /&gt;import com.lkbotics.visualizer.config.AppConfig;&lt;br /&gt;import com.lkbotics.visualizer.web.config.MvcConfig;&lt;br /&gt;&lt;br /&gt;public class CustomWebApplicationInitializer implements WebApplicationInitializer {&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onStartup(ServletContext container) throws ServletException {&lt;br /&gt;        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();&lt;br /&gt;        rootContext.register(AppConfig.class);&lt;br /&gt;        &lt;br /&gt;        container.addListener(new ContextLoaderListener(rootContext));&lt;br /&gt;        &lt;br /&gt;        AnnotationConfigWebApplicationContext dispatcherContext = new AnnotationConfigWebApplicationContext();&lt;br /&gt;        dispatcherContext.register(MvcConfig.class);&lt;br /&gt;        &lt;br /&gt;        FilterRegistration.Dynamic springSecurityFilterChain = container.addFilter(&quot;springSecurityFilterChain&quot;, new DelegatingFilterProxy());&lt;br /&gt;        springSecurityFilterChain.addMappingForUrlPatterns(null, false, &quot;/*&quot;);&lt;br /&gt;        springSecurityFilterChain.setAsyncSupported(true);&lt;br /&gt;        &lt;br /&gt;        FilterRegistration.Dynamic shallowETagFilter = container.addFilter(&quot;shallowETagFilter&quot;, new ShallowEtagHeaderFilter());&lt;br /&gt;        shallowETagFilter.addMappingForUrlPatterns(null, true, &quot;/*&quot;);&lt;br /&gt;        shallowETagFilter.setAsyncSupported(true);&lt;br /&gt;        &lt;br /&gt;        ServletRegistration.Dynamic dispatcher = container.addServlet(&quot;servletDispatcher&quot;, new DispatcherServlet(dispatcherContext));&lt;br /&gt;        dispatcher.setLoadOnStartup(1);&lt;br /&gt;        dispatcher.setAsyncSupported(true);&lt;br /&gt;        dispatcher.addMapping(&quot;/&quot;);        &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;As usual Spring Security requirements apply, There must be FilterChainProxy bean registered with the name springSecurityFilterChain or custom bean name must be passed in while instantiating the DelegatingFilterProxy inside WebApplicationInitializer.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&lt;b&gt;Caveats [1]&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;web.xml versioning&lt;br /&gt;&lt;br /&gt;WEB-INF/web.xml and WebApplicationInitializer use are not mutually exclusive; for example, web.xml can register one servlet, and a WebApplicationInitializer can register another. An initializer can even modify registrations performed in web.xml through methods such as ServletContext#getServletRegistration(String). However, if &lt;b&gt;WEB-INF/web.xml&lt;/b&gt; is present in the application, its version attribute must be set to &lt;b&gt;&quot;3.0&quot; or greater&lt;/b&gt;, otherwise ServletContainerInitializer bootstrapping will be &lt;b&gt;ignored&lt;/b&gt; by the servlet container.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/autorepo/docs/spring-framework/3.1.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html&quot;&gt;WebApplicationInitializer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/FilterRegistration.Dynamic.html&quot;&gt;FilterRegistration.Dynamic&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/09/spring-security-filter-chain.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-7624239783614683992</guid><pubDate>Thu, 24 Jul 2014 02:27:00 +0000</pubDate><atom:updated>2014-07-30T18:47:32.505-07:00</atom:updated><title>Spring Security Custom FilterChainProxy using Java Configuration</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In a previous &lt;a href=&quot;http://shazsterblog.blogspot.com/2014/02/spring-security-custom-filterchainproxy.html&quot;&gt;post&lt;/a&gt;&amp;nbsp;I wrote how to custom configure FilterChainProxy using Java Bean XML configuration file. I got some feedback and of the things I was pointed out was that it could also be done using Java configuration instead of XML configuration. But at that time I couldn&#39;t do it because we were using XML configuration files for beans. But now as part of my work I needed to work with Spring using Java configuration. So I thought this is the right time to go back and write the whole custom FilterChainProxy configuration in Java configuration.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;After some documentation reading, trial and error, stackoverflow I managed to get the following Java configuration to work as exactly as same as my previous post&#39;s XML configuration.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.Arrays;&lt;br /&gt;import java.util.Collection;&lt;br /&gt;import java.util.LinkedHashMap;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;import javax.inject.Inject;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;&lt;br /&gt;import org.springframework.context.annotation.Bean;&lt;br /&gt;import org.springframework.context.annotation.Configuration;&lt;br /&gt;import org.springframework.security.access.AccessDecisionVoter;&lt;br /&gt;import org.springframework.security.access.ConfigAttribute;&lt;br /&gt;import org.springframework.security.access.intercept.RunAsManager;&lt;br /&gt;import org.springframework.security.access.intercept.RunAsManagerImpl;&lt;br /&gt;import org.springframework.security.access.vote.AffirmativeBased;&lt;br /&gt;import org.springframework.security.access.vote.RoleVoter;&lt;br /&gt;import org.springframework.security.authentication.AuthenticationManager;&lt;br /&gt;import org.springframework.security.authentication.AuthenticationProvider;&lt;br /&gt;import org.springframework.security.authentication.ProviderManager;&lt;br /&gt;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&lt;br /&gt;import org.springframework.security.authentication.dao.ReflectionSaltSource;&lt;br /&gt;import org.springframework.security.authentication.dao.SaltSource;&lt;br /&gt;import org.springframework.security.authentication.encoding.Md5PasswordEncoder;&lt;br /&gt;import org.springframework.security.authentication.encoding.PasswordEncoder;&lt;br /&gt;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&lt;br /&gt;import org.springframework.security.core.userdetails.UserDetailsService;&lt;br /&gt;import org.springframework.security.web.DefaultSecurityFilterChain;&lt;br /&gt;import org.springframework.security.web.FilterChainProxy;&lt;br /&gt;import org.springframework.security.web.SecurityFilterChain;&lt;br /&gt;import org.springframework.security.web.access.AccessDeniedHandlerImpl;&lt;br /&gt;import org.springframework.security.web.access.ExceptionTranslationFilter;&lt;br /&gt;import org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;&lt;br /&gt;import org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource;&lt;br /&gt;import org.springframework.security.web.access.expression.WebExpressionVoter;&lt;br /&gt;import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;&lt;br /&gt;import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;&lt;br /&gt;import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;&lt;br /&gt;import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;&lt;br /&gt;import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;&lt;br /&gt;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&lt;br /&gt;import org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler;&lt;br /&gt;import org.springframework.security.web.authentication.logout.LogoutFilter;&lt;br /&gt;import org.springframework.security.web.authentication.logout.LogoutHandler;&lt;br /&gt;import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;&lt;br /&gt;import org.springframework.security.web.context.HttpSessionSecurityContextRepository;&lt;br /&gt;import org.springframework.security.web.context.SecurityContextPersistenceFilter;&lt;br /&gt;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;&lt;br /&gt;import org.springframework.security.web.util.matcher.RequestMatcher;&lt;br /&gt;import org.springframework.web.filter.RequestContextFilter;&lt;br /&gt;&lt;br /&gt;import com.lkbotics.visualizer.util.CustomUsernamePasswordAuthenticationFilter;&lt;br /&gt;&lt;br /&gt;@Configuration&lt;br /&gt;@EnableWebSecurity&lt;br /&gt;public class SecurityConfig {&lt;br /&gt;&lt;br /&gt;    @Inject&lt;br /&gt;    UserDetailsService userService;&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public AuthenticationManager authenticationManager() throws Exception {&lt;br /&gt;        AuthenticationManager authenticationManager = new ProviderManager(&lt;br /&gt;                Arrays.asList(authenticationProvider()));&lt;br /&gt;        return authenticationManager;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public AuthenticationProvider authenticationProvider() throws Exception {&lt;br /&gt;        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();&lt;br /&gt;        authenticationProvider.setUserDetailsService(userService);&lt;br /&gt;        authenticationProvider.setSaltSource(saltSource());&lt;br /&gt;        authenticationProvider.setPasswordEncoder(passwordEncoder());&lt;br /&gt;        authenticationProvider.afterPropertiesSet();&lt;br /&gt;        return authenticationProvider;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public SaltSource saltSource() throws Exception {&lt;br /&gt;        ReflectionSaltSource saltSource = new ReflectionSaltSource();&lt;br /&gt;        saltSource.setUserPropertyToUse(&quot;salt&quot;);&lt;br /&gt;        saltSource.afterPropertiesSet();&lt;br /&gt;        return saltSource;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public PasswordEncoder passwordEncoder() {&lt;br /&gt;        return new Md5PasswordEncoder();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public FilterChainProxy springSecurityFilterChain()&lt;br /&gt;            throws ServletException, Exception {&lt;br /&gt;        List&amp;lt;SecurityFilterChain&amp;gt; securityFilterChains = new ArrayList&amp;lt;SecurityFilterChain&amp;gt;();&lt;br /&gt;        securityFilterChains.add(new DefaultSecurityFilterChain(&lt;br /&gt;                new AntPathRequestMatcher(&quot;/login**&quot;)));&lt;br /&gt;        securityFilterChains.add(new DefaultSecurityFilterChain(&lt;br /&gt;                new AntPathRequestMatcher(&quot;/resources/**&quot;)));&lt;br /&gt;        securityFilterChains.add(new DefaultSecurityFilterChain(&lt;br /&gt;                new AntPathRequestMatcher(&quot;/**&quot;),&lt;br /&gt;                securityContextPersistenceFilter(), &lt;br /&gt;                logoutFilter(),&lt;br /&gt;                usernamePasswordAuthenticationFilter(),&lt;br /&gt;                exceptionTranslationFilter(),&lt;br /&gt;                filterSecurityInterceptor()));&lt;br /&gt;        return new FilterChainProxy(securityFilterChains);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public SecurityContextPersistenceFilter securityContextPersistenceFilter() {&lt;br /&gt;        return new SecurityContextPersistenceFilter(&lt;br /&gt;                new HttpSessionSecurityContextRepository());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public ExceptionTranslationFilter exceptionTranslationFilter() {&lt;br /&gt;        ExceptionTranslationFilter exceptionTranslationFilter = new ExceptionTranslationFilter(&lt;br /&gt;                new LoginUrlAuthenticationEntryPoint(&quot;/login&quot;));&lt;br /&gt;        AccessDeniedHandlerImpl accessDeniedHandlerImpl = new AccessDeniedHandlerImpl();&lt;br /&gt;        accessDeniedHandlerImpl.setErrorPage(&quot;/exception&quot;);&lt;br /&gt;        exceptionTranslationFilter&lt;br /&gt;                .setAccessDeniedHandler(accessDeniedHandlerImpl);&lt;br /&gt;        exceptionTranslationFilter.afterPropertiesSet();&lt;br /&gt;        return exceptionTranslationFilter;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public UsernamePasswordAuthenticationFilter usernamePasswordAuthenticationFilter()&lt;br /&gt;            throws Exception {&lt;br /&gt;        UsernamePasswordAuthenticationFilter usernamePasswordAuthenticationFilter = new UsernamePasswordAuthenticationFilter();&lt;br /&gt;        usernamePasswordAuthenticationFilter&lt;br /&gt;                .setAuthenticationManager(authenticationManager());&lt;br /&gt;        usernamePasswordAuthenticationFilter.setAllowSessionCreation(true);&lt;br /&gt;        SimpleUrlAuthenticationSuccessHandler successHandler = new SimpleUrlAuthenticationSuccessHandler(&lt;br /&gt;                &quot;/&quot;);&lt;br /&gt;        successHandler.setAlwaysUseDefaultTargetUrl(true);&lt;br /&gt;        usernamePasswordAuthenticationFilter&lt;br /&gt;                .setAuthenticationSuccessHandler(successHandler);&lt;br /&gt;        usernamePasswordAuthenticationFilter&lt;br /&gt;                .setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(&lt;br /&gt;                        &quot;/login?error=true&quot;));&lt;br /&gt;        usernamePasswordAuthenticationFilter.afterPropertiesSet();&lt;br /&gt;&lt;br /&gt;        return usernamePasswordAuthenticationFilter;&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public FilterSecurityInterceptor filterSecurityInterceptor()&lt;br /&gt;            throws Exception {&lt;br /&gt;        FilterSecurityInterceptor filterSecurityInterceptor = new FilterSecurityInterceptor();&lt;br /&gt;        filterSecurityInterceptor&lt;br /&gt;                .setAuthenticationManager(authenticationManager());&lt;br /&gt;        filterSecurityInterceptor&lt;br /&gt;                .setAccessDecisionManager(accessDecisionManager());&lt;br /&gt;        filterSecurityInterceptor.setRunAsManager(runAsManager());&lt;br /&gt;        LinkedHashMap&amp;lt;RequestMatcher, Collection&amp;lt;ConfigAttribute&amp;gt;&amp;gt; requestMap = new LinkedHashMap&amp;lt;RequestMatcher, Collection&amp;lt;ConfigAttribute&amp;gt;&amp;gt;();&lt;br /&gt;        List&amp;lt;ConfigAttribute&amp;gt; configs = new ArrayList&amp;lt;ConfigAttribute&amp;gt;();&lt;br /&gt;        configs.add(new org.springframework.security.access.SecurityConfig(&lt;br /&gt;                &quot;isAuthenticated()&quot;));&lt;br /&gt;        requestMap.put(new AntPathRequestMatcher(&quot;/**&quot;), configs);&lt;br /&gt;        FilterInvocationSecurityMetadataSource filterInvocationSecurityMetadataSource = new ExpressionBasedFilterInvocationSecurityMetadataSource(&lt;br /&gt;                requestMap, new DefaultWebSecurityExpressionHandler());&lt;br /&gt;        filterSecurityInterceptor&lt;br /&gt;                .setSecurityMetadataSource(filterInvocationSecurityMetadataSource);&lt;br /&gt;        filterSecurityInterceptor.afterPropertiesSet();&lt;br /&gt;&lt;br /&gt;        return filterSecurityInterceptor;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public AffirmativeBased accessDecisionManager() throws Exception {&lt;br /&gt;        List&amp;lt;AccessDecisionVoter&amp;gt; voters = new ArrayList&amp;lt;AccessDecisionVoter&amp;gt;();&lt;br /&gt;        voters.add(new WebExpressionVoter());&lt;br /&gt;        voters.add(new RoleVoter());&lt;br /&gt;        AffirmativeBased affirmativeBased = new AffirmativeBased(voters);&lt;br /&gt;        affirmativeBased.setAllowIfAllAbstainDecisions(false);&lt;br /&gt;        affirmativeBased.afterPropertiesSet();&lt;br /&gt;&lt;br /&gt;        return affirmativeBased;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public RunAsManager runAsManager() throws Exception {&lt;br /&gt;        RunAsManagerImpl runAsManager = new RunAsManagerImpl();&lt;br /&gt;        runAsManager.setKey(&quot;V_RUN_AS&quot;);&lt;br /&gt;        runAsManager.afterPropertiesSet();&lt;br /&gt;        return runAsManager;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public LogoutFilter logoutFilter() throws ServletException {&lt;br /&gt;        List&amp;lt;LogoutHandler&amp;gt; handlers = new ArrayList&amp;lt;LogoutHandler&amp;gt;();&lt;br /&gt;        handlers.add(new CookieClearingLogoutHandler(&quot;JSESSIONID&quot;));&lt;br /&gt;        handlers.add(new SecurityContextLogoutHandler());&lt;br /&gt;        LogoutFilter logoutFilter = new LogoutFilter(&quot;/login&quot;,&lt;br /&gt;                handlers.toArray(new LogoutHandler[] {}));&lt;br /&gt;        logoutFilter.afterPropertiesSet();&lt;br /&gt;        return logoutFilter;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Furthermore you will need the following configuration in web.xml to support the Java configuration.   &lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;&lt;br /&gt;    &amp;lt;param-name&amp;gt;contextClass&amp;lt;/param-name&amp;gt;&lt;br /&gt;    &amp;lt;param-value&amp;gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/context-param&amp;gt;&lt;br /&gt;  &amp;lt;context-param&amp;gt;&lt;br /&gt;      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br /&gt;      &amp;lt;param-value&amp;gt;&amp;lt;PACKAGE&amp;gt;.SecurityConfig&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/context-param&amp;gt;&lt;br /&gt;  &amp;lt;listener&amp;gt;&lt;br /&gt;    &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;&lt;br /&gt;  &amp;lt;/listener&amp;gt;&lt;br /&gt;  &amp;lt;filter&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;filter-class&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-class&amp;gt;&lt;br /&gt;  &amp;lt;/filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;      &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;      &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The same rules applies where DelegatingFilterProxy in web.xml must be named springSecurityFilterChain because our custom FilterChainProxy in SecurityConfig is named springSecurityFilterChain. &lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Trackbacks/Pings&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Spring Blog - &lt;a href=&quot;http://spring.io/blog/2014/07/29/this-week-in-spring-spring-xd-edition-july-29th-2014&quot;&gt;http://spring.io/blog/2014/07/29/this-week-in-spring-spring-xd-edition-july-29th-2014&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/07/spring-security-custom-filterchainproxy.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-8606458370134462137</guid><pubDate>Tue, 24 Jun 2014 09:40:00 +0000</pubDate><atom:updated>2014-06-24T22:38:48.076-07:00</atom:updated><title>Simple Redis Master/Slave Replication</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Redis is an in memory key value store developed to be scale-able from ground up. Redis enables this through client side sharding as well as server side master/slave replication. In this post I am going to explain a Simple 1 Master 2 Slave Server Replication Setup for Redis in a Single Host. This can be easily moved to multiple Hosts if and when the need arises with very minor changes. For this you must have downloaded redis and compiled it. If you haven&#39;t done that please follow my previous &lt;a href=&quot;http://shazsterblog.blogspot.com/2014/06/getting-started-with-redis-on-ubuntu.html&quot;&gt;post&lt;/a&gt;.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-gVg2_qme_10/U6lCSS_bqAI/AAAAAAAABeU/wMdmrJCBlo0/s1600/image.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-gVg2_qme_10/U6lCSS_bqAI/AAAAAAAABeU/wMdmrJCBlo0/s1600/image.png&quot; height=&quot;300&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;The setup I am going to create looks like the above figure, where there is a Redis master listening on port 6379 and 2 Redis slaves connecting to the Master and will be listening on ports 6380 and 6381 respectively.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;You need to follow the below steps to create 2 different configuration files for the slaves.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;/div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Open a Shell Terminal&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Navigate to redis home directory&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Issue &quot;cp redis.conf redis-slave1.conf&quot;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Issue &quot;cp redis.conf redis-slave2.conf&quot;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Open the &quot;redis-slave1.conf&quot; file using a Text Editor and find the line which has the port configuration and change it so that it looks like the following; &amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;b&gt;port 6380&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;6. &amp;nbsp;And then find the line which has the slaveof configuration and change it so that it looks like the following;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;b&gt; slaveof 127.0.0.1 6379&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/b&gt;7. &amp;nbsp; And then find dbfilename configuration and change to &quot;slave1-dump.rdb&quot; as following;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;dbfilename slave1-dump.rdb&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 8. &amp;nbsp;Repeat the steps 5 - 7 with &quot;redis-slave2.conf&quot; but this time the port must be 6381, dbfilename becomes &quot;slave2-dump.rdb&quot; and slaveof configuration remains the same.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;9. &amp;nbsp;Now you can start the Master followed by the 2 Slave by issuing the following commands; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;nohup ./src/redis-server ./redis.conf &amp;gt; master.log 2&amp;gt;&amp;amp;1&amp;amp;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nohup ./src/redis-server ./redis-slave1.conf &amp;gt; slave1.log 2&amp;gt;&amp;amp;1&amp;amp;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nohup ./src/redis-server ./redis-slave2.conf &amp;gt; slave2.log 2&amp;gt;&amp;amp;1&amp;amp;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &lt;/b&gt;&amp;nbsp;10. &amp;nbsp;Now you can issue a &quot;./src/redis-cli&quot; and can connect to the master or any slave by providing the &quot;./src/redis-cli -p &amp;lt;Slave Port&amp;gt;&quot;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The recommended setup is that All writes are done to Master and All reads are performed on Slaves.&lt;br /&gt;As you can see you just need to change the &quot;127.0.0.1&quot; host ip in your Slaves&#39; slaveof command if you want to move this replication setup to multiple hosts.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/06/simple-redis-masterslave-replication.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-gVg2_qme_10/U6lCSS_bqAI/AAAAAAAABeU/wMdmrJCBlo0/s72-c/image.png" height="72" width="72"/><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-1302451276017636428</guid><pubDate>Mon, 23 Jun 2014 06:57:00 +0000</pubDate><atom:updated>2014-06-23T00:24:03.259-07:00</atom:updated><title>Getting Started with Redis on Ubuntu</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Redis, an in-memory key value data store. It comes under the category of NoSQL or Non Relational Database where storing, manipulating and retrieving of data in Redis doesn&#39;t require and use any SQL or Relations (Tables).&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Relational Databases look at solving real world domain representation inside computers using a Relation/Table. A Relation/Table is a Set where the following properties are guaranteed.&lt;/div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Every Cell contains one atomic value.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Every Row is uniquely identifiable.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Order of the columns has no significance.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Order of the rows has no significance.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Furthermore relational databases allow to define constraints within and among relations. These constraints can be;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Entity Integrity Constraints - Primary Key/Unique Columns&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Referential Integrity Constraints - Foreign Key&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;On top of this there is a language called Structured Query Language which is a standardized way of Retrieving, Manipulating of data in those Relation/Table.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;With the growth of high volume websites such as Twitter, Facebook and the emergence of IAAS (Infrastructure As A Service) solutions such as Amazon AWS, which uses distributed data centers around the globe, the need for NoSQL databases are ever so high! This is because issuing of a single SQL which covers data in across multiple data centers in different countries is not possible. Furthermore relational databases depends a lot on JOINs and distributed data centers pose a problem to this also.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Redis, on the other hand doesn&#39;t use SQL or Relation/Table. Redis has built-in data structures and algorithms to solve frequently faced design issues.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Redis has Key/Value, Lists, Hashes (Maps), Set and Sorted Set data structures.&lt;/div&gt;&lt;br /&gt;To get started with Redis in Ubuntu;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;You just need to &lt;a href=&quot;http://redis.io/download&quot;&gt;download&lt;/a&gt;&amp;nbsp;Redis.&lt;/li&gt;&lt;li&gt;Unzip the File&lt;/li&gt;&lt;li&gt;Open a Shell Terminal&lt;/li&gt;&lt;li&gt;Navigate into the extracted directory&lt;/li&gt;&lt;li&gt;Issue &quot;make&quot; command&lt;/li&gt;&lt;li&gt;Optionally Issue &quot;make test&quot; to verify everything is working fine.&lt;/li&gt;&lt;li&gt;Navigate into &quot;src&quot; folder&lt;/li&gt;&lt;li&gt;Issue &quot;chmod&amp;nbsp;+x redis-server&quot; and &quot;chmod&amp;nbsp;+x redis-cli&quot;&lt;/li&gt;&lt;li&gt;Issue &quot;./redis-server&quot;&lt;/li&gt;&lt;li&gt;Now the Redis server will be up and listening in port 6379&lt;/li&gt;&lt;li&gt;You can issue &quot;./redis-cli&quot; to start a Client where you can issue commands to Redis server&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/06/getting-started-with-redis-on-ubuntu.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-5733641528483610515</guid><pubDate>Fri, 13 Jun 2014 08:43:00 +0000</pubDate><atom:updated>2014-06-13T01:43:37.426-07:00</atom:updated><title>Custom Dozer Mapper Factory Bean</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;As part of my work I had to learn and make use of Dozer mapper. A Java Bean to Java Bean Mapper which enables Converting from one type of Java Bean (Ex:- Spring hateoas&amp;nbsp;Resource) to another Java Bean (Ex:- Entity) easy and less error prone. You can learn more about this library from &lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;span id=&quot;goog_336401868&quot;&gt;&lt;/span&gt;Dozer&lt;/a&gt;&amp;nbsp;page.&lt;br /&gt;&lt;br /&gt;The tricky part doing the job was that the requirement was that every JPA Entity had a corresponding Mutable and Non Mutable interface. Mutable interface extends from the Non Mutable interface. So the mapping needed to be done by using the Mutable interface to Spring hateoas Resource.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;mappings xmlns=&quot;http://dozer.sourceforge.net&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br /&gt;    xsi:schemaLocation=&quot;http://dozer.sourceforge.net&lt;br /&gt;          http://dozer.sourceforge.net/schema/beanmapping.xsd&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;mapping&amp;gt;&lt;br /&gt;        &amp;lt;class-a&amp;gt;com.shazin.example.domain.MutableItem&amp;lt;/class-a&amp;gt;&lt;br /&gt;        &amp;lt;class-b&amp;gt;com.shazin.example.web.resource.ItemEditResource&amp;lt;/class-b&amp;gt;&lt;br /&gt;        &amp;lt;field&amp;gt;&lt;br /&gt;            &amp;lt;a&amp;gt;..&amp;lt;/a&amp;gt;&lt;br /&gt;            &amp;lt;b&amp;gt;..&amp;lt;/b&amp;gt;&lt;br /&gt;        &amp;lt;/field&amp;gt;&lt;br /&gt;        ..&lt;br /&gt;    &amp;lt;/mapping&amp;gt;&lt;br /&gt;&amp;lt;/mappings&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Furthermore when mapping the two back using the DozerBeanMapper API inside of the Service, the following needed to be done, completely avoiding the Entity class because at the service level only interfaces must be used not entities. &lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;mapper.map(sourceItemResource, MutableItem.class);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;This posed an issue because map method expected a second argument of implementation class of the destination bean.&lt;br /&gt;&lt;br /&gt;The solution was writing an Custom implementation of org.dozer.BeanFactory which will provide the correct Implementation class based on the interface. So wrote the following AbstractMapperBeanFactory class.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.HashMap;&lt;br /&gt;import java.util.Map;&lt;br /&gt;&lt;br /&gt;import org.dozer.BeanFactory;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;&lt;br /&gt;public abstract class AbstractMapperBeanFactory implements BeanFactory {&lt;br /&gt;    private static final Logger logger = LoggerFactory&lt;br /&gt;            .getLogger(AbstractMapperBeanFactory.class);&lt;br /&gt;&lt;br /&gt;    protected AbstractMapperBeanFactory() {&lt;br /&gt;        register(sourceToDestinationMap);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private final Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; sourceToDestinationMap = new HashMap&amp;lt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;    protected abstract void register(&lt;br /&gt;            Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; sourceToDestinationMap);&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public final Object createBean(Object source, Class&amp;lt;?&amp;gt; sourceClass,&lt;br /&gt;            String targetBeanId) {&lt;br /&gt;        Class&amp;lt;?&amp;gt; destinationClass = null;&lt;br /&gt;        Object result = null;&lt;br /&gt;        try {&lt;br /&gt;            Class&amp;lt;?&amp;gt; targetBeanClass = Thread.currentThread()&lt;br /&gt;                    .getContextClassLoader().loadClass(targetBeanId);&lt;br /&gt;            if (targetBeanClass.isInterface()) {&lt;br /&gt;                destinationClass = sourceToDestinationMap.get(targetBeanId);&lt;br /&gt;            } else {&lt;br /&gt;                destinationClass = targetBeanClass;&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            if (logger.isDebugEnabled()) {&lt;br /&gt;                logger.debug(&quot;Source Object : &quot; + source);&lt;br /&gt;                logger.debug(&quot;Source Class : &quot; + sourceClass);&lt;br /&gt;                logger.debug(&quot;Target Bean Id : &quot; + targetBeanId);&lt;br /&gt;                logger.debug(&quot;Destination Class : &quot; + destinationClass);&lt;br /&gt;                logger.debug(&quot;Target Bean Class : &quot; + targetBeanClass);&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            if (destinationClass == null) {&lt;br /&gt;                logger.warn(String.format(&lt;br /&gt;                        &quot;No matching destination class found for class %s&quot;,&lt;br /&gt;                        targetBeanId));&lt;br /&gt;            } else {&lt;br /&gt;                result = destinationClass.newInstance();&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;        } catch (ClassNotFoundException | InstantiationException&lt;br /&gt;                | IllegalAccessException e) {&lt;br /&gt;            logger.error(String.format(&lt;br /&gt;                    &quot;Error while creating target bean for class %s&quot;,&lt;br /&gt;                    targetBeanId), e);&lt;br /&gt;        }&lt;br /&gt;        return result;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;And for each Module we could register Interfaces and corresponding implementations by Sub classing the above abstract class and implementing the register method as following.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;public class CustomMappingBeanFactory extends AbstractMapperBeanFactory {&lt;br /&gt;&lt;br /&gt;    protected void register(Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; sourceToDestinationMap) {&lt;br /&gt;        sourceToDestinationMap.put(MutableItem.class.getName(), ItemEntity.class);&lt;br /&gt;        ..&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;And finally making use of the CustomMappingBeanFactory in the mapping configuration file as below.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;mappings xmlns=&quot;http://dozer.sourceforge.net&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br /&gt;    xsi:schemaLocation=&quot;http://dozer.sourceforge.net&lt;br /&gt;          http://dozer.sourceforge.net/schema/beanmapping.xsd&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;mapping bean-factory=&quot;CustomMappingBeanFactory&quot;&amp;gt;&lt;br /&gt;        &amp;lt;class-a&amp;gt;com.shazin.example.domain.MutableItem&amp;lt;/class-a&amp;gt;&lt;br /&gt;        &amp;lt;class-b&amp;gt;com.shazin.example.web.resource.ItemEditResource&amp;lt;/class-b&amp;gt;&lt;br /&gt;        &amp;lt;field&amp;gt;&lt;br /&gt;            &amp;lt;a&amp;gt;..&amp;lt;/a&amp;gt;&lt;br /&gt;            &amp;lt;b&amp;gt;..&amp;lt;/b&amp;gt;&lt;br /&gt;        &amp;lt;/field&amp;gt;&lt;br /&gt;        ..&lt;br /&gt;    &amp;lt;/mapping&amp;gt;&lt;br /&gt;&amp;lt;/mappings&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/06/custom-dozer-mapper-factory-bean.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-3792378168982300625</guid><pubDate>Fri, 04 Apr 2014 04:10:00 +0000</pubDate><atom:updated>2014-04-03T21:12:06.090-07:00</atom:updated><title>Java 8 Features Part 2</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;In a previous &lt;a href=&quot;http://shazsterblog.blogspot.com/2014/03/java-8-features-part-1.html&quot;&gt;post&lt;/a&gt;&amp;nbsp;I covered the features Parallel Operations and Method References newly available in Java 8. But the most significant and effecting feature is the Lambda Expressions. Lambda Expressions is a vast subject and was available in many other programming languages for sometime now. Java being an Object oriented programming language (with the exception of primitives of course) didn&#39;t support this up until its 1.8.0 version.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Problem (Or at least lack of efficiency) &lt;/b&gt;: Java was always Object oriented mostly methods are merely used to implement behavior or provide getters or setters. And more importantly a method can not exists without it being inside of a Class. This is a strong OOP Principle and has been having no problem for developers also.&lt;br /&gt;&lt;br /&gt;Except! when you want to do this;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;    public static void main(String[] args) {&lt;br /&gt;        new Thread(new Runnable() { &lt;br /&gt;            public void run() {&lt;br /&gt;                System.out.println(&quot;Hello, World!&quot;);&lt;br /&gt;            }&lt;br /&gt;        }).start();&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Well this code doesn&#39;t look any harm but as you can see for Just to pass the implementation which is in the &lt;b&gt;Runnable.run()&lt;/b&gt; you need to create an anonymous class. In a scenario where you have different type of Classes and accepting Interfaces as arguments such in Swing &lt;b&gt;ActionListener&lt;/b&gt; this can become a headache. Languages such as Javascript allows passing of functions around which eliminates this type of unnecessary codes. But Java didn&#39;t support it for good reasons.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Solution : Lambda Expressions to the Rescue! &lt;/b&gt;Lambda Expressions allows you to pass in Methods as if Java supports Global Methods. Enabling the flexibility of not defining anonymous classes and keeping the code clean and simple.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;    public static void main(String[] args) {&lt;br /&gt;        new Thread(() -&amp;gt; { System.out.println(&quot;Hello, World!&quot;); }).start();&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;What the HTML! is that?. Your inner Java coder would have screamed looking at that code. But fear not, not only this code compiles but it also runs and produces the exact same result.&lt;br /&gt;&lt;br /&gt;Basically Lambda Expressions enables the developer to define a method at the location of where it is required or have a reference to a Method (This was covered in previous post). This feature enables the developer to simplify the code. Lambda Expression is a really vast area and can not be covered in one blog post. So I highly recommend you to read the links in the references section.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Lambda Expressions -&amp;nbsp;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/04/java-8-features-part-2.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-8454137553981496106</guid><pubDate>Wed, 26 Mar 2014 08:31:00 +0000</pubDate><atom:updated>2014-03-26T01:31:40.906-07:00</atom:updated><title>Java 8 Features Part 1</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&quot;Change is the only thing that doesn&#39;t change&quot;. This statement explains&amp;nbsp;well anything and Java is not an exception in this regard. Java version 8 is released officially and you can download it from &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle&lt;/a&gt;. There are some significant changes introduced in Java 8 and following are some of those;&lt;/div&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Parallel Operations - Parallel Operations for JVMs running on top of Multi Core Platforms&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Method References - Ability to pass in a Method as a Reference.&amp;nbsp;&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Lambda Expressions - Biggest Syntax Changes to Java Ever&lt;/li&gt;&lt;/ol&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;So I&#39;ll start off with Parallel Operations and make my way down on each topic.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Parallel Operations have been introduced to leverage the Multiple CPUs available in almost every modern computer. Operations such as Sorting could become significantly faster if Multiple CPUs were used. The Arrays.parallel* methods provide these functions.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.Arrays;&lt;br /&gt;&lt;br /&gt;public class ParallelOperations {&lt;br /&gt;&lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        Integer[] ints = Util.generateRandomIntegers();&lt;br /&gt;        sort(ints);&lt;br /&gt;        Util.display(ints);&lt;br /&gt;        ints = Util.generateRandomIntegers();&lt;br /&gt;        parallelSort(ints);&lt;br /&gt;        Util.display(ints);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static void sort(Integer[] ints) {&lt;br /&gt;        long startTime = System.currentTimeMillis();&lt;br /&gt;        Arrays.sort(ints);&lt;br /&gt;        long endTime = System.currentTimeMillis();&lt;br /&gt;        System.out.printf(&quot;sort() Finished in %d milliseconds\n&quot;,&lt;br /&gt;                (endTime - startTime));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static void parallelSort(Integer[] ints) {&lt;br /&gt;        long startTime = System.currentTimeMillis();&lt;br /&gt;        Arrays.parallelSort(ints);&lt;br /&gt;        long endTime = System.currentTimeMillis();&lt;br /&gt;        System.out.printf(&quot;parallelSort() Finished in %d milliseconds\n&quot;,&lt;br /&gt;                (endTime - startTime));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;And passing method references can be done as following;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import java.util.Arrays;&lt;br /&gt;import java.util.Comparator;&lt;br /&gt;import java.util.function.BiConsumer;&lt;br /&gt;import java.util.function.Consumer;&lt;br /&gt;&lt;br /&gt;public class MethodReferences {&lt;br /&gt;&lt;br /&gt;    public static void main(String[] args) {&lt;br /&gt;        Integer[] ints = Util.generateRandomIntegers();&lt;br /&gt;        // Passing Arrays.sort static method as an argument&lt;br /&gt;        sort(Arrays::sort, ints);&lt;br /&gt;        Util.display(ints);&lt;br /&gt;        ints = Util.generateRandomIntegers();&lt;br /&gt;        // Passing Arrays.parallelSort static method as an argument&lt;br /&gt;        sort(Arrays::parallelSort, ints);&lt;br /&gt;        Util.display(ints);&lt;br /&gt;        String[] strings = new String[] {&quot;one&quot;, &quot;TWO&quot;, &quot;tHree&quot;};&lt;br /&gt;        // Passing Arrays.parallelSort static method and String.compareTo instance method as an arguments&lt;br /&gt;        sort(Arrays::sort, String::compareTo, strings);&lt;br /&gt;        Util.display(strings);&lt;br /&gt;        strings = new String[] {&quot;ball&quot;, &quot;apple&quot;, &quot;cat&quot;};&lt;br /&gt;        // Passing Arrays.parallelSort static method and String.compareToIgnoreCase instance method as an arguments&lt;br /&gt;        sort(Arrays::parallelSort, String::compareToIgnoreCase, strings);&lt;br /&gt;        Util.display(strings);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static void sort(Consumer&amp;lt;Integer[]&amp;gt; sorter, Integer[] values) {&lt;br /&gt;        sorter.accept(values);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public static void sort(BiConsumer&amp;lt;String[], Comparator&amp;lt;String&amp;gt;&amp;gt; sorter, Comparator&amp;lt;String&amp;gt; comparator, String[] values) {&lt;br /&gt;        sorter.accept(values, comparator);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;References &lt;/b&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Java 8 Compiler support for Eclipse Kepler - https://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_For_Kepler&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/03/java-8-features-part-1.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-448625562217027569</guid><pubDate>Tue, 25 Mar 2014 08:55:00 +0000</pubDate><atom:updated>2014-03-25T01:57:57.625-07:00</atom:updated><title>Tiny Url with Redis</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;As part of work, I was asked to research about &lt;a href=&quot;http://www.redis.io/&quot;&gt;Redis&lt;/a&gt;, a Distributed Key-Value Persistence Store developed to make caching extremely fast. So far I have found the following by going through documentation, Redis;&lt;/div&gt;&lt;ol&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;An In-memory Key-Value persistence store with off the shelf advanced data structures and algorithms&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Supports Hashes (Tables), Lists, Sets, Sorted Sets and of course Key-Value pairs&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Enables I/O concurrency but no execution parallelism (Single threaded engine).&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Supports command pipelining for lesser network roundtrips.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Supports transactions on demand by queuing commands.&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Supports Custom Script Execution (Similar to Stored Procedures)&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;Supports Publish/Subscribe on topics&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Redis stands out from Memcached because of its built-in datastructures and operations such as Lists, Sets, Hashes and Sorting functions. Redis is widely used in alot of applications which requires high performance such Twitter, Instagram, Stackoverflow and many more.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;To get some hands on experience on Redis I wrote a simple Tiny Url application using Redis and Spring MVC. Two Hash data structures are used in my application to store both the Url Code to Url Mapping and Url Code to Click Counts.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;tinyurls - To store&amp;nbsp;Url Code to Url Mapping&lt;/li&gt;&lt;li style=&quot;text-align: justify;&quot;&gt;tinyurls:clicks - To store&amp;nbsp;Url Code to Click Counts&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The controller for the application looks as the following. Where jedisClient is an instance of &lt;a href=&quot;https://github.com/xetorthio/jedis&quot;&gt;Jedis&lt;/a&gt;, a Java Client for Redis.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;package com.shazin.tinyurl;&lt;br /&gt;&lt;br /&gt;import java.util.HashMap;&lt;br /&gt;import java.util.List;&lt;br /&gt;import java.util.Map;&lt;br /&gt;&lt;br /&gt;import javax.inject.Inject;&lt;br /&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.ui.ModelMap;&lt;br /&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestParam;&lt;br /&gt;import org.springframework.web.servlet.ModelAndView;&lt;br /&gt;&lt;br /&gt;import redis.clients.jedis.Jedis;&lt;br /&gt;import redis.clients.jedis.TransactionBlock;&lt;br /&gt;import redis.clients.jedis.exceptions.JedisException;&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;@RequestMapping(&quot;/&quot;)&lt;br /&gt;public class TinyUrlController {&lt;br /&gt;&lt;br /&gt;    private static final String CLICKS = &quot;tinyurls:clicks&quot;;&lt;br /&gt;&lt;br /&gt;    private static final String TINY_URLS = &quot;tinyurls&quot;;&lt;br /&gt;&lt;br /&gt;    @Inject&lt;br /&gt;    private Jedis jedisClient;&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = &quot;create&quot;, method = RequestMethod.POST)&lt;br /&gt;    public ModelAndView create(@RequestParam(&quot;url&quot;) String url,&lt;br /&gt;            HttpServletRequest request) {&lt;br /&gt;        ModelMap map = new ModelMap();&lt;br /&gt;        String tinyUrl = null;&lt;br /&gt;        Long timeInMillis = System.currentTimeMillis();&lt;br /&gt;        String urlKey = Long.toHexString(timeInMillis);&lt;br /&gt;        jedisClient.hset(TINY_URLS, urlKey, url);&lt;br /&gt;        jedisClient.hset(CLICKS, urlKey, &quot;0&quot;);&lt;br /&gt;&lt;br /&gt;        tinyUrl = generateTinyUrl(request, urlKey);&lt;br /&gt;&lt;br /&gt;        map.put(&quot;tinyurl&quot;, tinyUrl);&lt;br /&gt;        return new ModelAndView(&quot;home&quot;, map);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public String generateTinyUrl(HttpServletRequest request, String urlKey) {&lt;br /&gt;        String tinyUrl;&lt;br /&gt;        tinyUrl = new StringBuilder()&lt;br /&gt;                .append((request.isSecure() ? &quot;https://&quot; : &quot;http://&quot;))&lt;br /&gt;                .append(request.getServerName()).append(&quot;:&quot;)&lt;br /&gt;                .append(request.getServerPort())&lt;br /&gt;                .append(request.getContextPath()).append(&quot;/u/&quot;).append(urlKey)&lt;br /&gt;                .toString();&lt;br /&gt;        return tinyUrl;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = &quot;u/{urlKey}&quot;, method = RequestMethod.GET)&lt;br /&gt;    public ModelAndView forwardUrl(@PathVariable(&quot;urlKey&quot;) String urlKey, HttpServletResponse response) {&lt;br /&gt;        String destinationUrl = null;&lt;br /&gt;        ModelMap map = new ModelMap();&lt;br /&gt;        String url = jedisClient.hget(TINY_URLS, urlKey);&lt;br /&gt;        if(url != null &amp;amp;&amp;amp; url.length() &amp;gt; 0) {&lt;br /&gt;            jedisClient.hincrBy(CLICKS, urlKey, 1);&lt;br /&gt;            map.put(&quot;url&quot;, url);&lt;br /&gt;            destinationUrl = &quot;redirect&quot;;&lt;br /&gt;        } else {&lt;br /&gt;            map.put(&quot;errorMsg&quot;, &quot;Invalid Code in Url!&quot;);&lt;br /&gt;            destinationUrl = &quot;home&quot;;&lt;br /&gt;        }&lt;br /&gt;        &lt;br /&gt;        return new ModelAndView(destinationUrl, map);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    @RequestMapping(value=&quot;/&quot;, method=RequestMethod.GET)&lt;br /&gt;    public ModelAndView home() {&lt;br /&gt;        return new ModelAndView(&quot;home&quot;);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    @RequestMapping(value=&quot;/clicks&quot;, method=RequestMethod.GET)&lt;br /&gt;    public ModelAndView clicks(HttpServletRequest request) {&lt;br /&gt;        ModelMap map = new ModelMap();&lt;br /&gt;        Map&amp;lt;String, String&amp;gt; clickCounts = jedisClient.hgetAll(CLICKS);&lt;br /&gt;        &lt;br /&gt;        Map&amp;lt;String, String&amp;gt; counts = new HashMap&amp;lt;String, String&amp;gt;();&lt;br /&gt;        &lt;br /&gt;        for(Map.Entry&amp;lt;String, String&amp;gt; entry:clickCounts.entrySet()) {&lt;br /&gt;            counts.put(generateTinyUrl(request, entry.getKey()), entry.getValue());&lt;br /&gt;        }&lt;br /&gt;        &lt;br /&gt;        map.put(&quot;clickCounts&quot;, counts);&lt;br /&gt;        &lt;br /&gt;        return new ModelAndView(&quot;clicks&quot;, map);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And the home.jsp looks as the following.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-1wMw9C278CY/UzE8z3KXWPI/AAAAAAAABbY/dKtUq49TJQA/s1600/Tiny1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-1wMw9C278CY/UzE8z3KXWPI/AAAAAAAABbY/dKtUq49TJQA/s1600/Tiny1.png&quot; height=&quot;147&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;Tiny Url&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;link href=&quot;${pageContext.request.contextPath}/resources/main.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;    &amp;lt;form id=&quot;urlShortenerForm&quot; action=&quot;${pageContext.request.contextPath}/create&quot; method=&quot;POST&quot;&amp;gt;&lt;br /&gt;        &amp;lt;center style=&quot;margin-top: 10%&quot;&amp;gt;&lt;br /&gt;            &amp;lt;c:if test=&quot;${errorMsg != null}&quot;&amp;gt;&lt;br /&gt;                &amp;lt;p style=&quot;color: red;&quot;&amp;gt;&lt;br /&gt;                    &amp;lt;b&amp;gt;${errorMsg}&amp;lt;/b&amp;gt;&lt;br /&gt;                &amp;lt;/p&amp;gt;&lt;br /&gt;            &amp;lt;/c:if&amp;gt;            &lt;br /&gt;            &amp;lt;p&amp;gt;Shorten any url!&amp;lt;/p&amp;gt;&lt;br /&gt;            &amp;lt;c:if test=&quot;${tinyurl != null}&quot;&amp;gt;&lt;br /&gt;                &amp;lt;p&amp;gt;&lt;br /&gt;                    &amp;lt;b&amp;gt;The Tiny Url is &amp;lt;a href=&quot;${tinyurl}&quot;&amp;gt;${tinyurl}&amp;lt;/a&amp;gt;&amp;lt;/b&amp;gt;&lt;br /&gt;                &amp;lt;/p&amp;gt;&lt;br /&gt;            &amp;lt;/c:if&amp;gt;&lt;br /&gt;            &amp;lt;p&amp;gt;&lt;br /&gt;                &amp;lt;textarea id=&quot;url&quot; name=&quot;url&quot; rows=&quot;5&quot; cols=&quot;50&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;br /&gt;            &amp;lt;/p&amp;gt;&lt;br /&gt;            &amp;lt;p&amp;gt;&lt;br /&gt;                &amp;lt;input type=&quot;button&quot; onclick=&quot;validateUrl()&quot; value=&quot;Shorten&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/p&amp;gt;&lt;br /&gt;            &amp;lt;p&amp;gt;&lt;br /&gt;                &amp;lt;a href=&quot;${pageContext.request.contextPath}/clicks&quot;&amp;gt;Clicks Count&amp;lt;/a&amp;gt;&lt;br /&gt;            &amp;lt;/p&amp;gt;&lt;br /&gt;        &amp;lt;/center&amp;gt;&lt;br /&gt;    &amp;lt;/form&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;    function validateUrl() {&lt;br /&gt;        var textArea = document.getElementById(&quot;url&quot;);&lt;br /&gt;        var valid = false;&lt;br /&gt;        var value = textArea.value;&lt;br /&gt;        if(value.length &amp;gt; 0) {&lt;br /&gt;            var httpIndex = value.toLowerCase().indexOf(&quot;http&quot;);&lt;br /&gt;            var columnIndex = value.indexOf(&quot;:&quot;);&lt;br /&gt;            var slashIndex = value.indexOf(&quot;/&quot;);        &lt;br /&gt;            if(httpIndex &amp;gt; -1 &amp;amp;&amp;amp; columnIndex &amp;gt; -1 &amp;amp;&amp;amp; slashIndex &amp;gt; -1) {&lt;br /&gt;                valid = true;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        if(valid) {&lt;br /&gt;            var urlShortenerForm = document.getElementById(&quot;urlShortenerForm&quot;);&lt;br /&gt;            urlShortenerForm.submit();&lt;br /&gt;        } else {&lt;br /&gt;            alert(&quot;Invalid Url, Please enter a valid Url&quot;);&lt;br /&gt;            textArea.value = &quot;&quot;;&lt;br /&gt;            textArea.focus();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;After submitting a URL, this how the Tiny URL will look like.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ZHgFiSB1Y5Q/UzE_Rxnos2I/AAAAAAAABbk/uBE6P3SB1G0/s1600/Tiny2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-ZHgFiSB1Y5Q/UzE_Rxnos2I/AAAAAAAABbk/uBE6P3SB1G0/s320/Tiny2.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The clicks.jsp will look like the following&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-XLe7zVOQZKI/UzFAfAufq3I/AAAAAAAABbs/JdRkONwMrvY/s1600/Tiny3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-XLe7zVOQZKI/UzFAfAufq3I/AAAAAAAABbs/JdRkONwMrvY/s1600/Tiny3.png&quot; height=&quot;230&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;Tiny Url Click Counts&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;link href=&quot;${pageContext.request.contextPath}/resources/main.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&amp;gt;&lt;br /&gt;&amp;lt;style type=&quot;text/css&quot;&amp;gt;&lt;br /&gt;table&lt;br /&gt;{&lt;br /&gt;border-collapse:collapse;&lt;br /&gt;}&lt;br /&gt;table, td&lt;br /&gt;{&lt;br /&gt;border: 1px solid black;&lt;br /&gt;text-align: center;&lt;br /&gt;}&lt;br /&gt;th {&lt;br /&gt;background: aqua;&lt;br /&gt;}&lt;br /&gt;&amp;lt;/style&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;    &amp;lt;center style=&quot;margin-top: 10%&quot;&amp;gt;&lt;br /&gt;        &amp;lt;p&amp;gt;Click Counts&amp;lt;/p&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;p&amp;gt;&lt;br /&gt;        &amp;lt;table border=&quot;1&quot;&amp;gt;&lt;br /&gt;            &amp;lt;tr&amp;gt;&lt;br /&gt;                &amp;lt;th&amp;gt;Url&amp;lt;/th&amp;gt;&lt;br /&gt;                &amp;lt;th&amp;gt;Click Count&amp;lt;/th&amp;gt;&lt;br /&gt;            &amp;lt;/tr&amp;gt;&lt;br /&gt;            &amp;lt;c:choose&amp;gt;&lt;br /&gt;                &amp;lt;c:when test=&quot;${clickCounts.size() != 0}&quot;&amp;gt;&lt;br /&gt;                    &amp;lt;c:forEach items=&quot;${clickCounts}&quot; var=&quot;clickCount&quot;&amp;gt;&lt;br /&gt;                        &amp;lt;tr&amp;gt;&lt;br /&gt;                            &amp;lt;td&amp;gt;&amp;lt;a href=&quot;${clickCount.key}&quot;&amp;gt;${clickCount.key}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;                            &amp;lt;td&amp;gt;${clickCount.value}&amp;lt;/td&amp;gt;&lt;br /&gt;                        &amp;lt;/tr&amp;gt;&lt;br /&gt;                    &amp;lt;/c:forEach&amp;gt;&lt;br /&gt;                &amp;lt;/c:when&amp;gt;&lt;br /&gt;                &amp;lt;c:otherwise&amp;gt;&lt;br /&gt;                    &amp;lt;tr&amp;gt;&lt;br /&gt;                        &amp;lt;td colspan=&quot;2&quot;&amp;gt;No clicks found&amp;lt;/td&amp;gt;&lt;br /&gt;                    &amp;lt;/tr&amp;gt;&lt;br /&gt;                &amp;lt;/c:otherwise&amp;gt;&lt;br /&gt;            &amp;lt;/c:choose&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;/table&amp;gt;&lt;br /&gt;        &amp;lt;/p&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;p&amp;gt;&lt;br /&gt;            &amp;lt;a href=&quot;${pageContext.request.contextPath}&quot;&amp;gt;Back&amp;lt;/a&amp;gt;&lt;br /&gt;        &amp;lt;/p&amp;gt;&lt;br /&gt;    &amp;lt;/center&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Finally the redirect.jsp will use a Javascript to redirect to the destination URL.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;br /&gt;    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;br /&gt;        window.location = &quot;${url}&quot;;&lt;br /&gt;    &amp;lt;/script&amp;gt;&lt;br /&gt;    &amp;lt;b&amp;gt;Redirecting Please wait...&amp;lt;/b&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;So in the backend the Url Code is generated using the Current Time in Milliseconds converted to Hexadecimal, and stored with the URL in tinyurls hash along with the click count which is 0 in tinyurls:clicks hash. And when the generated tiny url is clicked the corresponding url is retrieved from tinyurls hash based on the Url Code and tinyurls:clicks is incremented by one based on Url Code. Finally the user is redirected to Original URL.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;For this to work redis-server must be running!&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;This is just a basic example of the capabilities of Redis but is a good starting point. Hoping to learn further!&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/03/tiny-url-with-redis.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-1wMw9C278CY/UzE8z3KXWPI/AAAAAAAABbY/dKtUq49TJQA/s72-c/Tiny1.png" height="72" width="72"/><thr:total>2</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-7227284324555529352</guid><pubDate>Fri, 28 Feb 2014 09:05:00 +0000</pubDate><atom:updated>2014-02-28T01:05:28.662-08:00</atom:updated><title>Custom Hibernate NamingStrategy</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;As part of my work my lead asked me to find a way to dynamically pre-pend a prefix to all the Hibernate Entities which uses JPA&amp;nbsp;@Entity Annotation. This is to create a way to implement a flexible, customizable way to generate Entities which can be used across different projects by just changing the prefix.&lt;br /&gt;&lt;br /&gt;So after some googling I found a link [1] where it is explained how to use a Custom NamingStrategy but it didn&#39;t quite do the exact my lead was looking for because it worked only with&amp;nbsp;@Entity annotated classes which do not have&amp;nbsp;@Table annotation. But my lead wanted to keep the&amp;nbsp;@Table annotation and he wanted the&amp;nbsp;@JoinTable annotation names also to be prefixed.&lt;br /&gt;&lt;br /&gt;So after some trial and error I came up with the following changes with a Custom implementation of org.hibernate.cfg.ImprovedNamingStrategy and one hibernate configuration.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;import org.hibernate.cfg.ImprovedNamingStrategy;&lt;br /&gt;&lt;br /&gt;public class CustomNamingStrategy extends ImprovedNamingStrategy {&lt;br /&gt;    &lt;br /&gt;    private String prefix = &quot;customprefix_&quot;;&lt;br /&gt;    &lt;br /&gt;    public String tableName(String tableName) {&lt;br /&gt;        return _prefix(super.tableName(tableName));&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    public void setPrefix(String prefix) {&lt;br /&gt;        this.prefix = prefix;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    private String _prefix(String table) {&lt;br /&gt;        return prefix + table;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;and following configuration for hibernate&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;prop key=&quot;hibernate.ejb.naming_strategy&quot;&amp;gt;CustomNamingStrategy&amp;lt;/prop&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;http://www.petrikainulainen.net/programming/tips-and-tricks/implementing-a-custom-namingstrategy-with-hibernate/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/02/custom-hibernate-namingstrategy.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-8057660180333512024</guid><pubDate>Thu, 27 Feb 2014 15:16:00 +0000</pubDate><atom:updated>2014-03-11T23:11:40.246-07:00</atom:updated><title>Spring Security Custom FilterChainProxy Configuration</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;I have worked with Spring Security extensively for the past six months as part of my current job. But my work mostly involved configuring the most important FilterChainProxy of Spring Security using namespaces. But I wanted to dig deeper and to see how the internals of the Spring Security FilterChainProxy so I completely read the Spring Security Documentation for version 3.1.4.RELEASE and realized that in fact I can configure a custom FilterChainProxy given that I define the following filters which are a must have for the FilterChainProxy.&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;SecurityContextPersistenceFilter&lt;/li&gt;&lt;li&gt;ExceptionTranslationFilter&lt;/li&gt;&lt;li&gt;FilterSecurityInterceptor&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;The document had a small snippet of declaring these inside of the custom FilterChainProxy but that didn&#39;t show the complete set of beans required to get the FilterChainProxy working. So I wanted to get the bottom of it so I configured it myself by going through documentation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Basically you can have a working FilterChainProxy with the name springSecurityFilterChain by just using the following Spring Declarations using security namespace.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;br /&gt;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:security=&quot;http://www.springframework.org/schema/security&quot;&lt;br /&gt;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd&lt;br /&gt;        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;     &amp;lt;security:http security=&quot;none&quot; pattern=&quot;/resources/**&quot; /&amp;gt;&lt;br /&gt;     &amp;lt;security:http auto-config=&quot;true&quot; use-expressions=&quot;true&quot;&amp;gt;&lt;br /&gt;        &amp;lt;security:intercept-url pattern=&quot;/login*&quot;&lt;br /&gt;            access=&quot;isAnonymous()&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;security:intercept-url pattern=&quot;/**&quot;&lt;br /&gt;            access=&quot;isAuthenticated()&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;security:form-login login-page=&quot;/login&quot;&lt;br /&gt;            default-target-url=&quot;/&quot; always-use-default-target=&quot;true&quot;&lt;br /&gt;            authentication-failure-url=&quot;/login?error=true&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;security:logout invalidate-session=&quot;true&quot;&lt;br /&gt;            delete-cookies=&quot;JSESSIONID&quot; logout-success-url=&quot;/login&quot; /&amp;gt;&lt;br /&gt;    &amp;lt;/security:http&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;security:authentication-manager alias=&quot;authenticationManager&quot;&amp;gt;&lt;br /&gt;        &amp;lt;security:authentication-provider&lt;br /&gt;            user-service-ref=&quot;userService&quot;&amp;gt;&lt;br /&gt;            &amp;lt;security:password-encoder hash=&quot;md5&quot;&lt;br /&gt;                base64=&quot;true&quot;&amp;gt;&lt;br /&gt;                &amp;lt;security:salt-source user-property=&quot;salt&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/security:password-encoder&amp;gt;&lt;br /&gt;        &amp;lt;/security:authentication-provider&amp;gt;&lt;br /&gt;    &amp;lt;/security:authentication-manager&amp;gt;&lt;br /&gt;    &lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;But as you can see here I have set auto-config attribute of security:http namespace to true in order to generate all the required configurations of Filters for me. This is easy but not the most flexible declaration.  &lt;br /&gt;&lt;br /&gt;So the same thing can be declared explicitly without using the security namespace as follows.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;br /&gt;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:security=&quot;http://www.springframework.org/schema/security&quot;&lt;br /&gt;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd&lt;br /&gt;        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;security:authentication-manager alias=&quot;authenticationManager&quot;&amp;gt;&lt;br /&gt;        &amp;lt;security:authentication-provider&lt;br /&gt;            user-service-ref=&quot;userService&quot;&amp;gt;&lt;br /&gt;            &amp;lt;security:password-encoder hash=&quot;md5&quot;&lt;br /&gt;                base64=&quot;true&quot;&amp;gt;&lt;br /&gt;                &amp;lt;security:salt-source user-property=&quot;salt&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/security:password-encoder&amp;gt;&lt;br /&gt;        &amp;lt;/security:authentication-provider&amp;gt;&lt;br /&gt;    &amp;lt;/security:authentication-manager&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;springSecurityFilterChain&quot; class=&quot;org.springframework.security.web.FilterChainProxy&quot;&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;list&amp;gt;&lt;br /&gt;                &amp;lt;security:filter-chain pattern=&quot;/login**&quot; filters=&quot;none&quot;/&amp;gt;&lt;br /&gt;                &amp;lt;security:filter-chain pattern=&quot;/resources/**&quot; filters=&quot;none&quot;/&amp;gt;&lt;br /&gt;                &amp;lt;security:filter-chain pattern=&quot;/**&quot;&lt;br /&gt;                    filters=&quot;securityContextPersistenceFilterWithASCTrue,    &lt;br /&gt;                                                          logoutFilter,                                                &lt;br /&gt;                                                             formLoginFilter,                                                              &lt;br /&gt;                                                             formLoginExceptionTranslationFilter,&lt;br /&gt;                                                             filterSecurityInterceptor&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/list&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;securityContextPersistenceFilterWithASCTrue&quot;&lt;br /&gt;        class=&quot;org.springframework.security.web.context.SecurityContextPersistenceFilter&quot;&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;bean class=&quot;org.springframework.security.web.context.HttpSessionSecurityContextRepository&quot;/&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;    &lt;br /&gt;    &amp;lt;bean id=&quot;formLoginExceptionTranslationFilter&quot;&lt;br /&gt;        class=&quot;org.springframework.security.web.access.ExceptionTranslationFilter&quot;&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;bean&lt;br /&gt;                class=&quot;org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint&quot;&amp;gt;&lt;br /&gt;                &amp;lt;constructor-arg value=&quot;/login&quot;/&amp;gt;                &lt;br /&gt;            &amp;lt;/bean&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;accessDeniedHandler&quot;&amp;gt;&lt;br /&gt;            &amp;lt;bean&lt;br /&gt;                class=&quot;org.springframework.security.web.access.AccessDeniedHandlerImpl&quot;&amp;gt;&lt;br /&gt;                &amp;lt;property name=&quot;errorPage&quot; value=&quot;/exception&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/bean&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;formLoginFilter&quot;&lt;br /&gt;        class=&quot;org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter&quot;&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;authenticationManager&quot; ref=&quot;authenticationManager&quot;/&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;allowSessionCreation&quot; value=&quot;true&quot;/&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;authenticationSuccessHandler&quot;&amp;gt;&lt;br /&gt;            &amp;lt;bean class=&quot;org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler&quot;&amp;gt;&lt;br /&gt;                &amp;lt;constructor-arg value=&quot;/&quot;/&amp;gt;&lt;br /&gt;                &amp;lt;property name=&quot;alwaysUseDefaultTargetUrl&quot; value=&quot;true&quot;/&amp;gt;&lt;br /&gt;            &amp;lt;/bean&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;authenticationFailureHandler&quot;&amp;gt;&lt;br /&gt;            &amp;lt;bean class=&quot;org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler&quot;&amp;gt;&lt;br /&gt;                &amp;lt;constructor-arg value=&quot;/login?error=true&quot;/&amp;gt;&lt;br /&gt;            &amp;lt;/bean&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;filterSecurityInterceptor&quot;&lt;br /&gt;        class=&quot;org.springframework.security.web.access.intercept.FilterSecurityInterceptor&quot;&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;authenticationManager&quot; ref=&quot;authenticationManager&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;accessDecisionManager&quot; ref=&quot;accessDecisionManager&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;runAsManager&quot; ref=&quot;runAsManager&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;securityMetadataSource&quot;&amp;gt;&lt;br /&gt;            &amp;lt;security:filter-security-metadata-source use-expressions=&quot;true&quot;&amp;gt;&lt;br /&gt;                &amp;lt;security:intercept-url pattern=&quot;/**&quot;&lt;br /&gt;                    access=&quot;isAuthenticated()&quot; /&amp;gt;&lt;br /&gt;            &amp;lt;/security:filter-security-metadata-source&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;accessDecisionManager&quot;&lt;br /&gt;        class=&quot;org.springframework.security.access.vote.AffirmativeBased&quot;&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;list&amp;gt;&lt;br /&gt;                &amp;lt;bean class=&quot;org.springframework.security.access.vote.RoleVoter&quot;/&amp;gt;&lt;br /&gt;                &amp;lt;bean class=&quot;org.springframework.security.web.access.expression.WebExpressionVoter&quot;/&amp;gt;&lt;br /&gt;            &amp;lt;/list&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;allowIfAllAbstainDecisions&quot; value=&quot;false&quot;/&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;bean id=&quot;runAsManager&quot;&lt;br /&gt;        class=&quot;org.springframework.security.access.intercept.RunAsManagerImpl&quot;&amp;gt;&lt;br /&gt;        &amp;lt;property name=&quot;key&quot; value=&quot;TELCO_RUN_AS&quot;/&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;        &lt;br /&gt;    &amp;lt;bean id=&quot;logoutFilter&quot; class=&quot;org.springframework.security.web.authentication.logout.LogoutFilter&quot;&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg value=&quot;/login&quot;/&amp;gt;        &lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;list&amp;gt;&lt;br /&gt;                &amp;lt;bean class=&quot;org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler&quot;&amp;gt;&lt;br /&gt;                    &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;                        &amp;lt;list&amp;gt;&lt;br /&gt;                            &amp;lt;value&amp;gt;JSESSIONID&amp;lt;/value&amp;gt;&lt;br /&gt;                        &amp;lt;/list&amp;gt;                        &lt;br /&gt;                    &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;                &amp;lt;/bean&amp;gt;&lt;br /&gt;                &amp;lt;bean class=&quot;org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler&quot;/&amp;gt;&lt;br /&gt;            &amp;lt;/list&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;    &lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Wow Spring Security namespace is a real life saver when it comes to configuring right? but critics might ask why declare explicitly when it generates.&lt;br /&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Gives more control over the configurations&lt;/li&gt;&lt;li&gt;Enables to understand the flow&lt;/li&gt;&lt;li&gt;Enables flexibility&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;For this Custom FilterChainProxy to work it must be named similar to the filter name of DelegatingFilterProxy in the web.xml configuration, for example with the following configuration;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;&amp;lt;filter&amp;gt;&lt;br /&gt;        &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;        &amp;lt;filter-class&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-class&amp;gt;&lt;br /&gt;    &amp;lt;/filter&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;        &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt;&lt;br /&gt;        &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;    &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The explicitly declared FilterChainProxy must be named springSecurityFilterChain. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Trackbacks/Pings&lt;/b&gt;&lt;br /&gt;  &lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Spring Blog -&lt;a href=&quot;http://spring.io/blog/2014/03/05/this-week-in-spring-march-4th-2014&quot;&gt;&amp;nbsp;http://spring.io/blog/2014/03/05/this-week-in-spring-march-4th-2014&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/02/spring-security-custom-filterchainproxy.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>4</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-3212873396218454664</guid><pubDate>Sun, 02 Feb 2014 05:03:00 +0000</pubDate><atom:updated>2014-02-01T21:03:28.367-08:00</atom:updated><title>Interfacing Force Sensing Resistor with Arduino</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I got the time to test a Arduino compatible component I had for a long time. It is a 1.5&quot; Force Sensing Resistor (FSR) cable of measuring the force applied onto its surface area. The following shows a really small demo/tutorial on how to connect the FSR to Arduino and read its force value. More details on the FSR can be found &lt;a href=&quot;http://www.lkbotics.com/force%20sensor&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-e-xKYJaq23g/Uu3Ouy1H4iI/AAAAAAAABaY/JahUNBh3E5Y/s1600/FSR.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-e-xKYJaq23g/Uu3Ouy1H4iI/AAAAAAAABaY/JahUNBh3E5Y/s1600/FSR.png&quot; height=&quot;193&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Above is the Fritzing layout of the connected Arduino and FSR. And below you can see the photo of the FSR connected.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/--NIil8Pp7LM/Uu3PntsbokI/AAAAAAAABag/j9tco279yRQ/s1600/20140202_124308.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/--NIil8Pp7LM/Uu3PntsbokI/AAAAAAAABag/j9tco279yRQ/s1600/20140202_124308.jpg&quot; height=&quot;320&quot; width=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The following the Arduino sketch which reads the value of the FSR and prints in the Serial.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;&quot;&gt;&lt;code&gt;int value = 0;&lt;br /&gt;&lt;br /&gt;void setup() {&lt;br /&gt;  Serial.begin(9600); &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void loop() {&lt;br /&gt;  value = analogRead(A0);&lt;br /&gt;  Serial.print(&quot;Force : &quot;);&lt;br /&gt;  Serial.print(value, DEC);&lt;br /&gt;  Serial.print(&quot;\n&quot;);&lt;br /&gt;  delay(100); &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Output of the Serial is as follows.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-4q0_4whQWaA/Uu3RhH6wjzI/AAAAAAAABas/1Awdl6zBGxs/s1600/SerialOutput.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-4q0_4whQWaA/Uu3RhH6wjzI/AAAAAAAABas/1Awdl6zBGxs/s1600/SerialOutput.png&quot; height=&quot;295&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;References&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;http://bildr.org/2012/11/force-sensitive-resistor-arduino/&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/02/interfacing-force-sensing-resistor-with.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-e-xKYJaq23g/Uu3Ouy1H4iI/AAAAAAAABaY/JahUNBh3E5Y/s72-c/FSR.png" height="72" width="72"/><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-7941666868022023550.post-5968000175353695942</guid><pubDate>Tue, 14 Jan 2014 07:05:00 +0000</pubDate><atom:updated>2014-12-31T20:45:40.661-08:00</atom:updated><title>Face following RC Car using Android + Arduino + USB Host Shield</title><description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;I have been working with an Arduino +&amp;nbsp;RC Car setup for a quite a sometime in this &lt;a href=&quot;http://shazsterblog.blogspot.com/2013/04/rc-car-tear-down-and-control-using.html&quot;&gt;post&lt;/a&gt;&amp;nbsp;and this &lt;a href=&quot;http://shazsterblog.blogspot.com/2013/10/giving-rc-car-simple-brain-using.html&quot;&gt;post&lt;/a&gt;. Finally I wanted to do something with it by integrating it to an Android phone. After some googling I found that I can connect the Android&amp;nbsp;+ Arduino using USB Host Shield in two different ways. One is where the Arduino +&amp;nbsp;USB Host Shield acts as an Android Accessory (I have a done a &lt;a href=&quot;http://shazsterblog.blogspot.com/2013/03/android-412-jelly-bean-and-arduino-mega.html&quot;&gt;post &lt;/a&gt;using that too) and the other one is where the Arduino&amp;nbsp;+&amp;nbsp;USB Host Shield&amp;nbsp;is connected through Android Debug Bridge (ADB). I used the ADB method because I have already tried the Accessory method.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #222222; font-family: inherit;&quot;&gt;The uniqueness in this approach is that many people have done RC Car Hacks using Arduino to control the Remote Control not directly the car itself. The following hack directly controls the car instead of sending commands using the Remote control.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;So I have already connected the RC Car&#39;s control pins to Arduino (Check out the previous posts) and so started coding my arduino sketch which is below.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; #include &amp;lt;SPI.h&amp;gt;  &lt;br /&gt; #include &amp;lt;Adb.h&amp;gt;  &lt;br /&gt; #define FW_PIN 3  &lt;br /&gt; #define BW_PIN 4  &lt;br /&gt; #define LF_PIN 5  &lt;br /&gt; #define RT_PIN 6  &lt;br /&gt; // Adb connection.  &lt;br /&gt; Connection * connection;  &lt;br /&gt; // Elapsed time for ADC sampling  &lt;br /&gt; long lastTime;  &lt;br /&gt; void actuate(int pin);  &lt;br /&gt; void turnLeft();  &lt;br /&gt; void turnRight();  &lt;br /&gt; // Event handler for the shell connection.   &lt;br /&gt; void adbEventHandler(Connection * connection, adb_eventType event, uint16_t length, uint8_t * data)  &lt;br /&gt; {  &lt;br /&gt;  int i;  &lt;br /&gt;  // Data packets contain two bytes, one for each servo, in the range of [0..180]  &lt;br /&gt;  if (event == ADB_CONNECTION_RECEIVE)  &lt;br /&gt;  {  &lt;br /&gt;   Serial.println(data[0], DEC);  &lt;br /&gt;   if(data[0] == 0x01) {  &lt;br /&gt;     actuate(FW_PIN);  &lt;br /&gt;   } else if(data[0] == 0x02) {  &lt;br /&gt;     actuate(BW_PIN);   &lt;br /&gt;   } else if(data[0] == 0x03) {  &lt;br /&gt;     turnLeft();   &lt;br /&gt;   } else if(data[0] == 0x04) {  &lt;br /&gt;     turnRight();   &lt;br /&gt;   }  &lt;br /&gt;  }  &lt;br /&gt; }  &lt;br /&gt; void setup()  &lt;br /&gt; {  &lt;br /&gt;  Serial.begin(9600);  &lt;br /&gt;  // Note start time  &lt;br /&gt;  lastTime = millis();  &lt;br /&gt;  pinMode(FW_PIN, OUTPUT);  &lt;br /&gt;  pinMode(BW_PIN, OUTPUT);  &lt;br /&gt;  pinMode(LF_PIN, OUTPUT);  &lt;br /&gt;  pinMode(RT_PIN, OUTPUT);  &lt;br /&gt;  // Initialise the ADB subsystem.   &lt;br /&gt;  ADB::init();  &lt;br /&gt;  // Open an ADB stream to the phone&#39;s shell. Auto-reconnect  &lt;br /&gt;  connection = ADB::addConnection(&quot;tcp:4567&quot;, true, adbEventHandler);   &lt;br /&gt; }  &lt;br /&gt; void loop()  &lt;br /&gt; {  &lt;br /&gt;  lastTime = millis();  &lt;br /&gt;  // Poll the ADB subsystem.  &lt;br /&gt;  ADB::poll();  &lt;br /&gt;  delay(50);  &lt;br /&gt; }  &lt;br /&gt; void actuate(int pin) {  &lt;br /&gt;  digitalWrite(pin, HIGH);  &lt;br /&gt;  delay(50);  &lt;br /&gt;  digitalWrite(pin, LOW);   &lt;br /&gt; }  &lt;br /&gt; void turnLeft() {  &lt;br /&gt;  digitalWrite(LF_PIN, HIGH);  &lt;br /&gt;  actuate(FW_PIN);  &lt;br /&gt;  digitalWrite(LF_PIN, LOW);  &lt;br /&gt; }  &lt;br /&gt; void turnRight() {  &lt;br /&gt;  digitalWrite(RT_PIN, HIGH);  &lt;br /&gt;  actuate(FW_PIN);  &lt;br /&gt;  digitalWrite(RT_PIN, LOW);  &lt;br /&gt; }  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;And for the Android Face detection app I made use of OpenCV Sample - face detection app which is available in the OpenCV for Android SDK version 2.4.7 samples directory. I added the microbridge server source codes which I downloaded from ADB Microbridge google code site and did slight following modifications to OpenCV Android Face detection app.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;AndroidManifest.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&amp;gt;  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Because the Microbridge server is a TCP Server which listens on port 4567.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;FdActivity.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt;1:  package org.opencv.samples.facedetect;  &lt;br /&gt;2:  ...  &lt;br /&gt;3:  public class FdActivity extends Activity implements CvCameraViewListener2 {  &lt;br /&gt;4:       ...       &lt;br /&gt;5:       private Server server;  &lt;br /&gt;6:       /** Called when the activity is first created. */  &lt;br /&gt;7:       @Override  &lt;br /&gt;8:       public void onCreate(Bundle savedInstanceState) {  &lt;br /&gt;9:            ...  &lt;br /&gt;10:            // Create TCP server  &lt;br /&gt;11:            server = null;  &lt;br /&gt;12:            try {  &lt;br /&gt;13:                 server = new Server(4567);  &lt;br /&gt;14:                 server.start();  &lt;br /&gt;15:            } catch (IOException e) {  &lt;br /&gt;16:                 Log.e(&quot;microbridge&quot;, &quot;Unable to start TCP server&quot;, e);  &lt;br /&gt;17:                 System.exit(-1);  &lt;br /&gt;18:            }            &lt;br /&gt;19:       }  &lt;br /&gt;20:       public Mat onCameraFrame(CvCameraViewFrame inputFrame) {  &lt;br /&gt;21:            ...  &lt;br /&gt;22:            Rect firstFace = null;  &lt;br /&gt;23:            if(facesArray.length &amp;gt; 0) { &lt;br /&gt;24:                 Size size = mRgba.size(); &lt;br /&gt;25:                 firstFace = facesArray[0];  &lt;br /&gt;26:                 byte[] data = new byte[1];  &lt;br /&gt;27:                 if(firstFace.x &amp;gt; size.width / 2) {  &lt;br /&gt;28:                      data[0] = 0x03;  &lt;br /&gt;29:                 } else if(firstFace.x &amp;lt; size.width / 2) {  &lt;br /&gt;30:                      data[0] = 0x04;  &lt;br /&gt;31:                 }   &lt;br /&gt;32:                 try {  &lt;br /&gt;33:                      server.send(data);  &lt;br /&gt;34:                 } catch (IOException e) {  &lt;br /&gt;35:                      // TODO Auto-generated catch block  &lt;br /&gt;36:                      e.printStackTrace();  &lt;br /&gt;37:                 }  &lt;br /&gt;38:            }  &lt;br /&gt;39:            return mRgba;  &lt;br /&gt;40:       }       &lt;br /&gt;41:  }  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The logic I have used here is if the First Detected Face is in the right half of the image then turn right or else turn left and go forward. In order for Android and Arduino to communicate using ADB USB Debugging must be enabled in Android.&lt;br /&gt;&lt;br /&gt;Finally you can see the entire thing working together in the below video.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/yFkOEQa9EyU&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt; &lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The USB cable to Arduino is only connected to power up the whole unit. I tried a 9v Battery and you can see the battery connector connected to the Arduino but the phone was also drawing power from the battery thus it wasn&#39;t enough to power up the system. But I think a 12v Battery may be sufficient enough.&lt;br /&gt;&lt;br /&gt;If anyone need the full source codes you can find it at &lt;a href=&quot;http://github.com/shazin/facecar&quot;&gt;github.com/shazin/facecar&lt;/a&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;References&lt;/b&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;ADB Microbridge -&amp;nbsp;&lt;a href=&quot;https://code.google.com/p/microbridge/&quot;&gt;https://code.google.com/p/microbridge/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;OpenCV for Android -&amp;nbsp;&lt;a href=&quot;http://opencv.org/platforms/android.html&quot;&gt;http://opencv.org/platforms/android.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Android ADB -&amp;nbsp;&lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt;http://developer.android.com/tools/help/adb.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Trackbacks/Pings&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Hackaday -&amp;nbsp;&lt;a href=&quot;http://hackaday.com/2014/01/15/androidarduino-face-following-rc-car/&quot;&gt;http://hackaday.com/2014/01/15/androidarduino-face-following-rc-car/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Elandroidelibre -&amp;nbsp;&lt;a href=&quot;http://www.elandroidelibre.com/2014/01/un-coche-teledirigido-que-detecta-caras-gracias-a-un-experimento-con-android-y-arduino.html&quot;&gt;http://www.elandroidelibre.com/2014/01/un-coche-teledirigido-que-detecta-caras-gracias-a-un-experimento-con-android-y-arduino.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Atmel Corporation Blog -&amp;nbsp;&lt;a href=&quot;http://atmelcorporation.wordpress.com/2014/01/16/hacking-and-tracking-an-rc-car/&quot;&gt;http://atmelcorporation.wordpress.com/2014/01/16/hacking-and-tracking-an-rc-car/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;8+ DIY Arduino Projects for Both Beginners and Advanced Users in Robotics -&amp;nbsp;&lt;a href=&quot;http://www.intorobotics.com/8-diy-arduino-projects-beginners-advanced-users-robotics/&quot;&gt;http://www.intorobotics.com/8-diy-arduino-projects-beginners-advanced-users-robotics/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</description><link>http://shazsterblog.blogspot.com/2014/01/face-following-rc-car-using-android.html</link><author>noreply@blogger.com (Shazin Sadakath)</author><thr:total>0</thr:total></item></channel></rss>